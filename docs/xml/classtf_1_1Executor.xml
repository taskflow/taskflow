<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.1" xml:lang="en-US">
  <compounddef id="classtf_1_1Executor" kind="class" language="C++" prot="public">
    <compoundname>tf::Executor</compoundname>
    <includes refid="executor_8hpp" local="no">taskflow/core/executor.hpp</includes>
      <sectiondef kind="friend">
      <memberdef kind="friend" id="classtf_1_1Executor_1a61184f9bd9c801d0a5eccecfdbddc641" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>class</type>
        <definition>friend class FlowBuilder</definition>
        <argsstring></argsstring>
        <name>FlowBuilder</name>
        <param>
          <type><ref refid="classtf_1_1FlowBuilder" kindref="compound">FlowBuilder</ref></type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="taskflow/core/executor.hpp" line="65" column="3" bodyfile="taskflow/core/executor.hpp" bodystart="65" bodyend="-1"/>
      </memberdef>
      <memberdef kind="friend" id="classtf_1_1Executor_1aa48945297ede77a161defc88033ce8a6" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>class</type>
        <definition>friend class Subflow</definition>
        <argsstring></argsstring>
        <name>Subflow</name>
        <param>
          <type><ref refid="classtf_1_1Subflow" kindref="compound">Subflow</ref></type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="taskflow/core/executor.hpp" line="66" column="3" bodyfile="taskflow/core/executor.hpp" bodystart="66" bodyend="-1"/>
      </memberdef>
      <memberdef kind="friend" id="classtf_1_1Executor_1af3d14e26ba8af9e6cc5a32aad8446de7" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>class</type>
        <definition>friend class Runtime</definition>
        <argsstring></argsstring>
        <name>Runtime</name>
        <param>
          <type><ref refid="classtf_1_1Runtime" kindref="compound">Runtime</ref></type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="taskflow/core/executor.hpp" line="67" column="3" bodyfile="taskflow/core/executor.hpp" bodystart="67" bodyend="-1"/>
      </memberdef>
      <memberdef kind="friend" id="classtf_1_1Executor_1a5336d73e2623282058a4f84a0423fac3" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>class</type>
        <definition>friend class NonpreemptiveRuntime</definition>
        <argsstring></argsstring>
        <name>NonpreemptiveRuntime</name>
        <param>
          <type>NonpreemptiveRuntime</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="taskflow/core/executor.hpp" line="68" column="3" bodyfile="taskflow/core/executor.hpp" bodystart="68" bodyend="-1"/>
      </memberdef>
      <memberdef kind="friend" id="classtf_1_1Executor_1ab016b9124e80f55ad92e01579c060f08" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>class</type>
        <definition>friend class Algorithm</definition>
        <argsstring></argsstring>
        <name>Algorithm</name>
        <param>
          <type>Algorithm</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="taskflow/core/executor.hpp" line="69" column="3" bodyfile="taskflow/core/executor.hpp" bodystart="69" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="classtf_1_1Executor_1aef4cf993dbd8efa0372cdea6b0f725d7" prot="private" static="no" mutable="no">
        <type><ref refid="cpp/thread/mutex" kindref="compound" external="/home/thuang295/Code/taskflow/doxygen/cppreference-doxygen-web.tag.xml">std::mutex</ref></type>
        <definition>std::mutex tf::Executor::_taskflows_mutex</definition>
        <argsstring></argsstring>
        <name>_taskflows_mutex</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="taskflow/core/executor.hpp" line="1070" column="14" bodyfile="taskflow/core/executor.hpp" bodystart="1070" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classtf_1_1Executor_1ad93162f032d463cc845fbca4fc0d960e" prot="private" static="no" mutable="no">
        <type><ref refid="cpp/container/vector" kindref="compound" external="/home/thuang295/Code/taskflow/doxygen/cppreference-doxygen-web.tag.xml">std::vector</ref>&lt; <ref refid="classtf_1_1Worker" kindref="compound">Worker</ref> &gt;</type>
        <definition>std::vector&lt;Worker&gt; tf::Executor::_workers</definition>
        <argsstring></argsstring>
        <name>_workers</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="taskflow/core/executor.hpp" line="1072" column="15" bodyfile="taskflow/core/executor.hpp" bodystart="1072" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classtf_1_1Executor_1ab36f7f886f9a6a9ad67ce919ca39d688" prot="private" static="no" mutable="no">
        <type>DefaultNotifier</type>
        <definition>DefaultNotifier tf::Executor::_notifier</definition>
        <argsstring></argsstring>
        <name>_notifier</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="taskflow/core/executor.hpp" line="1073" column="19" bodyfile="taskflow/core/executor.hpp" bodystart="1073" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classtf_1_1Executor_1a7bd9227be27ebae3a10d5c317a6ef5de" prot="private" static="no" mutable="no">
        <type><ref refid="cpp/atomic/atomic" kindref="compound" external="/home/thuang295/Code/taskflow/doxygen/cppreference-doxygen-web.tag.xml">std::atomic</ref>&lt; size_t &gt;</type>
        <definition>std::atomic&lt;size_t&gt; tf::Executor::_num_topologies</definition>
        <argsstring></argsstring>
        <name>_num_topologies</name>
        <initializer>{0}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="taskflow/core/executor.hpp" line="1075" column="15" bodyfile="taskflow/core/executor.hpp" bodystart="1075" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classtf_1_1Executor_1a63090414fbad15f5934838d21aa0a28f" prot="private" static="no" mutable="no">
        <type><ref refid="cpp/container/list" kindref="compound" external="/home/thuang295/Code/taskflow/doxygen/cppreference-doxygen-web.tag.xml">std::list</ref>&lt; <ref refid="classtf_1_1Taskflow" kindref="compound">Taskflow</ref> &gt;</type>
        <definition>std::list&lt;Taskflow&gt; tf::Executor::_taskflows</definition>
        <argsstring></argsstring>
        <name>_taskflows</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="taskflow/core/executor.hpp" line="1077" column="13" bodyfile="taskflow/core/executor.hpp" bodystart="1077" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classtf_1_1Executor_1a193faa77f840c8ab653cf063fba6a6f9" prot="private" static="no" mutable="no">
        <type>Freelist&lt; Node * &gt;</type>
        <definition>Freelist&lt;Node*&gt; tf::Executor::_buffers</definition>
        <argsstring></argsstring>
        <name>_buffers</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="taskflow/core/executor.hpp" line="1079" column="12" bodyfile="taskflow/core/executor.hpp" bodystart="1079" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classtf_1_1Executor_1a9b123d06eb807bf275ba761938624afc" prot="private" static="no" mutable="no">
        <type><ref refid="cpp/memory/shared_ptr" kindref="compound" external="/home/thuang295/Code/taskflow/doxygen/cppreference-doxygen-web.tag.xml">std::shared_ptr</ref>&lt; <ref refid="classtf_1_1WorkerInterface" kindref="compound">WorkerInterface</ref> &gt;</type>
        <definition>std::shared_ptr&lt;WorkerInterface&gt; tf::Executor::_worker_interface</definition>
        <argsstring></argsstring>
        <name>_worker_interface</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="taskflow/core/executor.hpp" line="1081" column="19" bodyfile="taskflow/core/executor.hpp" bodystart="1081" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classtf_1_1Executor_1ad7f083460df992b1186f83ac99481a57" prot="private" static="no" mutable="no">
        <type><ref refid="cpp/container/unordered_set" kindref="compound" external="/home/thuang295/Code/taskflow/doxygen/cppreference-doxygen-web.tag.xml">std::unordered_set</ref>&lt; <ref refid="cpp/memory/shared_ptr" kindref="compound" external="/home/thuang295/Code/taskflow/doxygen/cppreference-doxygen-web.tag.xml">std::shared_ptr</ref>&lt; <ref refid="classtf_1_1ObserverInterface" kindref="compound">ObserverInterface</ref> &gt; &gt;</type>
        <definition>std::unordered_set&lt;std::shared_ptr&lt;ObserverInterface&gt; &gt; tf::Executor::_observers</definition>
        <argsstring></argsstring>
        <name>_observers</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="taskflow/core/executor.hpp" line="1082" column="22" bodyfile="taskflow/core/executor.hpp" bodystart="1082" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classtf_1_1Executor_1a7aeb0de870c6e28599e9f80486dae736" prot="private" static="no" mutable="no">
        <type><ref refid="cpp/container/unordered_map" kindref="compound" external="/home/thuang295/Code/taskflow/doxygen/cppreference-doxygen-web.tag.xml">std::unordered_map</ref>&lt; <ref refid="cpp/thread/thread/id" kindref="compound" external="/home/thuang295/Code/taskflow/doxygen/cppreference-doxygen-web.tag.xml">std::thread::id</ref>, <ref refid="classtf_1_1Worker" kindref="compound">Worker</ref> * &gt;</type>
        <definition>std::unordered_map&lt;std::thread::id, Worker*&gt; tf::Executor::_t2w</definition>
        <argsstring></argsstring>
        <name>_t2w</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="taskflow/core/executor.hpp" line="1083" column="22" bodyfile="taskflow/core/executor.hpp" bodystart="1083" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classtf_1_1Executor_1a23b4c858279616d79612dccd9a715365" prot="public" static="no" const="no" explicit="yes" inline="no" virt="non-virtual">
        <type></type>
        <definition>tf::Executor::Executor</definition>
        <argsstring>(size_t N=std::thread::hardware_concurrency(), std::shared_ptr&lt; WorkerInterface &gt; wix=nullptr)</argsstring>
        <name>Executor</name>
        <param>
          <type>size_t</type>
          <declname>N</declname>
          <defval><ref refid="cpp/thread/thread/hardware_concurrency" kindref="compound" external="/home/thuang295/Code/taskflow/doxygen/cppreference-doxygen-web.tag.xml">std::thread::hardware_concurrency</ref>()</defval>
        </param>
        <param>
          <type><ref refid="cpp/memory/shared_ptr" kindref="compound" external="/home/thuang295/Code/taskflow/doxygen/cppreference-doxygen-web.tag.xml">std::shared_ptr</ref>&lt; <ref refid="classtf_1_1WorkerInterface" kindref="compound">WorkerInterface</ref> &gt;</type>
          <declname>wix</declname>
          <defval>nullptr</defval>
        </param>
        <briefdescription>
<para>constructs the executor with <computeroutput>N</computeroutput> worker threads </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>N</parametername>
</parameternamelist>
<parameterdescription>
<para>number of workers (default <ref refid="cpp/thread/thread/hardware_concurrency" kindref="compound" external="/home/thuang295/Code/taskflow/doxygen/cppreference-doxygen-web.tag.xml">std::thread::hardware_concurrency</ref>) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>wix</parametername>
</parameternamelist>
<parameterdescription>
<para>interface class instance to configure workers&apos; behaviors</para>
</parameterdescription>
</parameteritem>
</parameterlist>
The constructor spawns <computeroutput>N</computeroutput> worker threads to run tasks in a work-stealing loop. The number of workers must be greater than zero or an exception will be thrown. By default, the number of worker threads is equal to the maximum hardware concurrency returned by <ref refid="cpp/thread/thread/hardware_concurrency" kindref="compound" external="/home/thuang295/Code/taskflow/doxygen/cppreference-doxygen-web.tag.xml">std::thread::hardware_concurrency</ref>.</para>
<para>Users can alter the worker behavior, such as changing thread affinity, via deriving an instance from <ref refid="classtf_1_1WorkerInterface" kindref="compound">tf::WorkerInterface</ref>.</para>
<para><simplesect kind="attention"><para>An exception will be thrown if executor construction fails. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="taskflow/core/executor.hpp" line="91" column="12"/>
      </memberdef>
      <memberdef kind="function" id="classtf_1_1Executor_1a5a511b0cc23b264826373d3dabcef670" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>tf::Executor::~Executor</definition>
        <argsstring>()</argsstring>
        <name>~Executor</name>
        <briefdescription>
<para>destructs the executor </para>
        </briefdescription>
        <detaileddescription>
<para>The destructor calls <ref refid="classtf_1_1Executor_1ab9aa252f70e9a40020a1e5a89d485b85" kindref="member">Executor::wait_for_all</ref> to wait for all submitted taskflows to complete and then notifies all worker threads to stop and join these threads. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="taskflow/core/executor.hpp" line="103" column="3"/>
      </memberdef>
      <memberdef kind="function" id="classtf_1_1Executor_1a8d08f0cb79e7b3780087975d13368a96" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classtf_1_1Future" kindref="compound">tf::Future</ref>&lt; void &gt;</type>
        <definition>tf::Future&lt;void&gt; tf::Executor::run</definition>
        <argsstring>(Taskflow &amp;taskflow)</argsstring>
        <name>run</name>
        <param>
          <type><ref refid="classtf_1_1Taskflow" kindref="compound">Taskflow</ref> &amp;</type>
          <declname>taskflow</declname>
        </param>
        <briefdescription>
<para>runs a taskflow once </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>taskflow</parametername>
</parameternamelist>
<parameterdescription>
<para>a <ref refid="classtf_1_1Taskflow" kindref="compound">tf::Taskflow</ref> object</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>a <ref refid="classtf_1_1Future" kindref="compound">tf::Future</ref> that holds the result of the execution</para>
</simplesect>
This member function executes the given taskflow once and returns a <ref refid="classtf_1_1Future" kindref="compound">tf::Future</ref> object that eventually holds the result of the execution.</para>
<para><programlisting filename=".cpp"><codeline><highlight class="normal"><ref refid="classtf_1_1Future" kindref="compound">tf::Future&lt;void&gt;</ref><sp/>future<sp/>=<sp/>executor.run(taskflow);</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>do<sp/>something<sp/>else</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">future.wait();</highlight></codeline>
</programlisting></para>
<para>This member function is thread-safe. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="taskflow/core/executor.hpp" line="123" column="14"/>
      </memberdef>
      <memberdef kind="function" id="classtf_1_1Executor_1a4b97752c00b788918cb8396fbb1b3ad0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classtf_1_1Future" kindref="compound">tf::Future</ref>&lt; void &gt;</type>
        <definition>tf::Future&lt;void&gt; tf::Executor::run</definition>
        <argsstring>(Taskflow &amp;&amp;taskflow)</argsstring>
        <name>run</name>
        <param>
          <type><ref refid="classtf_1_1Taskflow" kindref="compound">Taskflow</ref> &amp;&amp;</type>
          <declname>taskflow</declname>
        </param>
        <briefdescription>
<para>runs a moved taskflow once </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>taskflow</parametername>
</parameternamelist>
<parameterdescription>
<para>a moved <ref refid="classtf_1_1Taskflow" kindref="compound">tf::Taskflow</ref> object</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>a <ref refid="classtf_1_1Future" kindref="compound">tf::Future</ref> that holds the result of the execution</para>
</simplesect>
This member function executes a moved taskflow once and returns a <ref refid="classtf_1_1Future" kindref="compound">tf::Future</ref> object that eventually holds the result of the execution. The executor will take care of the lifetime of the moved taskflow.</para>
<para><programlisting filename=".cpp"><codeline><highlight class="normal"><ref refid="classtf_1_1Future" kindref="compound">tf::Future&lt;void&gt;</ref><sp/>future<sp/>=<sp/>executor.run(std::move(taskflow));</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>do<sp/>something<sp/>else</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">future.wait();</highlight></codeline>
</programlisting></para>
<para>This member function is thread-safe. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="taskflow/core/executor.hpp" line="144" column="14"/>
      </memberdef>
      <memberdef kind="function" id="classtf_1_1Executor_1a5a480ed24a6fd1e4152db69c0c5e2f89" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename C</type>
          </param>
        </templateparamlist>
        <type><ref refid="classtf_1_1Future" kindref="compound">tf::Future</ref>&lt; void &gt;</type>
        <definition>tf::Future&lt;void&gt; tf::Executor::run</definition>
        <argsstring>(Taskflow &amp;taskflow, C &amp;&amp;callable)</argsstring>
        <name>run</name>
        <param>
          <type><ref refid="classtf_1_1Taskflow" kindref="compound">Taskflow</ref> &amp;</type>
          <declname>taskflow</declname>
        </param>
        <param>
          <type>C &amp;&amp;</type>
          <declname>callable</declname>
        </param>
        <briefdescription>
<para>runs a taskflow once and invoke a callback upon completion </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>taskflow</parametername>
</parameternamelist>
<parameterdescription>
<para>a <ref refid="classtf_1_1Taskflow" kindref="compound">tf::Taskflow</ref> object </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>callable</parametername>
</parameternamelist>
<parameterdescription>
<para>a callable object to be invoked after this run</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>a <ref refid="classtf_1_1Future" kindref="compound">tf::Future</ref> that holds the result of the execution</para>
</simplesect>
This member function executes the given taskflow once and invokes the given callable when the execution completes. This member function returns a <ref refid="classtf_1_1Future" kindref="compound">tf::Future</ref> object that eventually holds the result of the execution.</para>
<para><programlisting filename=".cpp"><codeline><highlight class="normal"><ref refid="classtf_1_1Future" kindref="compound">tf::Future&lt;void&gt;</ref><sp/>future<sp/>=<sp/>executor.run(taskflow,<sp/>[](){<sp/><ref refid="cpp/io/basic_ostream" kindref="compound" external="/home/thuang295/Code/taskflow/doxygen/cppreference-doxygen-web.tag.xml">std::cout</ref><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;done&quot;</highlight><highlight class="normal">;<sp/>});</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>do<sp/>something<sp/>else</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">future.wait();</highlight></codeline>
</programlisting></para>
<para>This member function is thread-safe. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="taskflow/core/executor.hpp" line="169" column="14"/>
      </memberdef>
      <memberdef kind="function" id="classtf_1_1Executor_1a2d0dc32d81100202168e42ac1d3dd8f9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename C</type>
          </param>
        </templateparamlist>
        <type><ref refid="classtf_1_1Future" kindref="compound">tf::Future</ref>&lt; void &gt;</type>
        <definition>tf::Future&lt;void&gt; tf::Executor::run</definition>
        <argsstring>(Taskflow &amp;&amp;taskflow, C &amp;&amp;callable)</argsstring>
        <name>run</name>
        <param>
          <type><ref refid="classtf_1_1Taskflow" kindref="compound">Taskflow</ref> &amp;&amp;</type>
          <declname>taskflow</declname>
        </param>
        <param>
          <type>C &amp;&amp;</type>
          <declname>callable</declname>
        </param>
        <briefdescription>
<para>runs a moved taskflow once and invoke a callback upon completion </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>taskflow</parametername>
</parameternamelist>
<parameterdescription>
<para>a moved <ref refid="classtf_1_1Taskflow" kindref="compound">tf::Taskflow</ref> object </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>callable</parametername>
</parameternamelist>
<parameterdescription>
<para>a callable object to be invoked after this run</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>a <ref refid="classtf_1_1Future" kindref="compound">tf::Future</ref> that holds the result of the execution</para>
</simplesect>
This member function executes a moved taskflow once and invokes the given callable when the execution completes. This member function returns a <ref refid="classtf_1_1Future" kindref="compound">tf::Future</ref> object that eventually holds the result of the execution. The executor will take care of the lifetime of the moved taskflow.</para>
<para><programlisting filename=".cpp"><codeline><highlight class="normal"><ref refid="classtf_1_1Future" kindref="compound">tf::Future&lt;void&gt;</ref><sp/>future<sp/>=<sp/>executor.run(</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>std::move(taskflow),<sp/>[](){<sp/><ref refid="cpp/io/basic_ostream" kindref="compound" external="/home/thuang295/Code/taskflow/doxygen/cppreference-doxygen-web.tag.xml">std::cout</ref><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;done&quot;</highlight><highlight class="normal">;<sp/>}</highlight></codeline>
<codeline><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>do<sp/>something<sp/>else</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">future.wait();</highlight></codeline>
</programlisting></para>
<para>This member function is thread-safe. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="taskflow/core/executor.hpp" line="196" column="14"/>
      </memberdef>
      <memberdef kind="function" id="classtf_1_1Executor_1af15db5f7dde8e7ff1f86ef8fe825e9e2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classtf_1_1Future" kindref="compound">tf::Future</ref>&lt; void &gt;</type>
        <definition>tf::Future&lt;void&gt; tf::Executor::run_n</definition>
        <argsstring>(Taskflow &amp;taskflow, size_t N)</argsstring>
        <name>run_n</name>
        <param>
          <type><ref refid="classtf_1_1Taskflow" kindref="compound">Taskflow</ref> &amp;</type>
          <declname>taskflow</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>N</declname>
        </param>
        <briefdescription>
<para>runs a taskflow for <computeroutput>N</computeroutput> times </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>taskflow</parametername>
</parameternamelist>
<parameterdescription>
<para>a <ref refid="classtf_1_1Taskflow" kindref="compound">tf::Taskflow</ref> object </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>N</parametername>
</parameternamelist>
<parameterdescription>
<para>number of runs</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>a <ref refid="classtf_1_1Future" kindref="compound">tf::Future</ref> that holds the result of the execution</para>
</simplesect>
This member function executes the given taskflow <computeroutput>N</computeroutput> times and returns a <ref refid="classtf_1_1Future" kindref="compound">tf::Future</ref> object that eventually holds the result of the execution.</para>
<para><programlisting filename=".cpp"><codeline><highlight class="normal"><ref refid="classtf_1_1Future" kindref="compound">tf::Future&lt;void&gt;</ref><sp/>future<sp/>=<sp/>executor.run_n(taskflow,<sp/>2);<sp/><sp/></highlight><highlight class="comment">//<sp/>run<sp/>taskflow<sp/>2<sp/>times</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>do<sp/>something<sp/>else</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">future.wait();</highlight></codeline>
</programlisting></para>
<para>This member function is thread-safe. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="taskflow/core/executor.hpp" line="217" column="14"/>
      </memberdef>
      <memberdef kind="function" id="classtf_1_1Executor_1a04aa012598622e807dba3272aa464d7e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classtf_1_1Future" kindref="compound">tf::Future</ref>&lt; void &gt;</type>
        <definition>tf::Future&lt;void&gt; tf::Executor::run_n</definition>
        <argsstring>(Taskflow &amp;&amp;taskflow, size_t N)</argsstring>
        <name>run_n</name>
        <param>
          <type><ref refid="classtf_1_1Taskflow" kindref="compound">Taskflow</ref> &amp;&amp;</type>
          <declname>taskflow</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>N</declname>
        </param>
        <briefdescription>
<para>runs a moved taskflow for <computeroutput>N</computeroutput> times </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>taskflow</parametername>
</parameternamelist>
<parameterdescription>
<para>a moved <ref refid="classtf_1_1Taskflow" kindref="compound">tf::Taskflow</ref> object </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>N</parametername>
</parameternamelist>
<parameterdescription>
<para>number of runs</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>a <ref refid="classtf_1_1Future" kindref="compound">tf::Future</ref> that holds the result of the execution</para>
</simplesect>
This member function executes a moved taskflow <computeroutput>N</computeroutput> times and returns a <ref refid="classtf_1_1Future" kindref="compound">tf::Future</ref> object that eventually holds the result of the execution. The executor will take care of the lifetime of the moved taskflow.</para>
<para><programlisting filename=".cpp"><codeline><highlight class="normal"><ref refid="classtf_1_1Future" kindref="compound">tf::Future&lt;void&gt;</ref><sp/>future<sp/>=<sp/>executor.run_n(</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>std::move(taskflow),<sp/>2<sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>run<sp/>the<sp/>moved<sp/>taskflow<sp/>2<sp/>times</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>do<sp/>something<sp/>else</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">future.wait();</highlight></codeline>
</programlisting></para>
<para>This member function is thread-safe. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="taskflow/core/executor.hpp" line="241" column="14"/>
      </memberdef>
      <memberdef kind="function" id="classtf_1_1Executor_1a37af2ca2a97f0188fb2c4868d6f322ba" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename C</type>
          </param>
        </templateparamlist>
        <type><ref refid="classtf_1_1Future" kindref="compound">tf::Future</ref>&lt; void &gt;</type>
        <definition>tf::Future&lt;void&gt; tf::Executor::run_n</definition>
        <argsstring>(Taskflow &amp;taskflow, size_t N, C &amp;&amp;callable)</argsstring>
        <name>run_n</name>
        <param>
          <type><ref refid="classtf_1_1Taskflow" kindref="compound">Taskflow</ref> &amp;</type>
          <declname>taskflow</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>N</declname>
        </param>
        <param>
          <type>C &amp;&amp;</type>
          <declname>callable</declname>
        </param>
        <briefdescription>
<para>runs a taskflow for <computeroutput>N</computeroutput> times and then invokes a callback </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>taskflow</parametername>
</parameternamelist>
<parameterdescription>
<para>a <ref refid="classtf_1_1Taskflow" kindref="compound">tf::Taskflow</ref> </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>N</parametername>
</parameternamelist>
<parameterdescription>
<para>number of runs </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>callable</parametername>
</parameternamelist>
<parameterdescription>
<para>a callable object to be invoked after this run</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>a <ref refid="classtf_1_1Future" kindref="compound">tf::Future</ref> that holds the result of the execution</para>
</simplesect>
This member function executes the given taskflow <computeroutput>N</computeroutput> times and invokes the given callable when the execution completes. This member function returns a <ref refid="classtf_1_1Future" kindref="compound">tf::Future</ref> object that eventually holds the result of the execution.</para>
<para><programlisting filename=".cpp"><codeline><highlight class="normal"><ref refid="classtf_1_1Future" kindref="compound">tf::Future&lt;void&gt;</ref><sp/>future<sp/>=<sp/>executor.run(</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>taskflow,<sp/>2,<sp/>[](){<sp/><ref refid="cpp/io/basic_ostream" kindref="compound" external="/home/thuang295/Code/taskflow/doxygen/cppreference-doxygen-web.tag.xml">std::cout</ref><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;done&quot;</highlight><highlight class="normal">;<sp/>}<sp/><sp/></highlight><highlight class="comment">//<sp/>runs<sp/>taskflow<sp/>2<sp/>times<sp/>and<sp/>invoke</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>the<sp/>lambda<sp/>to<sp/>print<sp/>&quot;done&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>do<sp/>something<sp/>else</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">future.wait();</highlight></codeline>
</programlisting></para>
<para>This member function is thread-safe. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="taskflow/core/executor.hpp" line="269" column="14"/>
      </memberdef>
      <memberdef kind="function" id="classtf_1_1Executor_1ae5c5c6a1c1f6d4740414c86daa6a3901" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename C</type>
          </param>
        </templateparamlist>
        <type><ref refid="classtf_1_1Future" kindref="compound">tf::Future</ref>&lt; void &gt;</type>
        <definition>tf::Future&lt;void&gt; tf::Executor::run_n</definition>
        <argsstring>(Taskflow &amp;&amp;taskflow, size_t N, C &amp;&amp;callable)</argsstring>
        <name>run_n</name>
        <param>
          <type><ref refid="classtf_1_1Taskflow" kindref="compound">Taskflow</ref> &amp;&amp;</type>
          <declname>taskflow</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>N</declname>
        </param>
        <param>
          <type>C &amp;&amp;</type>
          <declname>callable</declname>
        </param>
        <briefdescription>
<para>runs a moved taskflow for <computeroutput>N</computeroutput> times and then invokes a callback </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>taskflow</parametername>
</parameternamelist>
<parameterdescription>
<para>a moved <ref refid="classtf_1_1Taskflow" kindref="compound">tf::Taskflow</ref> </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>N</parametername>
</parameternamelist>
<parameterdescription>
<para>number of runs </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>callable</parametername>
</parameternamelist>
<parameterdescription>
<para>a callable object to be invoked after this run</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>a <ref refid="classtf_1_1Future" kindref="compound">tf::Future</ref> that holds the result of the execution</para>
</simplesect>
This member function executes a moved taskflow <computeroutput>N</computeroutput> times and invokes the given callable when the execution completes. This member function returns a <ref refid="classtf_1_1Future" kindref="compound">tf::Future</ref> object that eventually holds the result of the execution.</para>
<para><programlisting filename=".cpp"><codeline><highlight class="normal"><ref refid="classtf_1_1Future" kindref="compound">tf::Future&lt;void&gt;</ref><sp/>future<sp/>=<sp/>executor.run_n(</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>run<sp/>the<sp/>moved<sp/>taskflow<sp/>2<sp/>times<sp/>and<sp/>invoke<sp/>the<sp/>lambda<sp/>to<sp/>print<sp/>&quot;done&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>std::move(taskflow),<sp/>2,<sp/>[](){<sp/><ref refid="cpp/io/basic_ostream" kindref="compound" external="/home/thuang295/Code/taskflow/doxygen/cppreference-doxygen-web.tag.xml">std::cout</ref><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;done&quot;</highlight><highlight class="normal">;<sp/>}</highlight></codeline>
<codeline><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>do<sp/>something<sp/>else</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">future.wait();</highlight></codeline>
</programlisting></para>
<para>This member function is thread-safe. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="taskflow/core/executor.hpp" line="297" column="14"/>
      </memberdef>
      <memberdef kind="function" id="classtf_1_1Executor_1ae4f9e214ea5ee873e8d90a70bc1c77e8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename P</type>
          </param>
        </templateparamlist>
        <type><ref refid="classtf_1_1Future" kindref="compound">tf::Future</ref>&lt; void &gt;</type>
        <definition>tf::Future&lt;void&gt; tf::Executor::run_until</definition>
        <argsstring>(Taskflow &amp;taskflow, P &amp;&amp;pred)</argsstring>
        <name>run_until</name>
        <param>
          <type><ref refid="classtf_1_1Taskflow" kindref="compound">Taskflow</ref> &amp;</type>
          <declname>taskflow</declname>
        </param>
        <param>
          <type>P &amp;&amp;</type>
          <declname>pred</declname>
        </param>
        <briefdescription>
<para>runs a taskflow multiple times until the predicate becomes true </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>taskflow</parametername>
</parameternamelist>
<parameterdescription>
<para>a <ref refid="classtf_1_1Taskflow" kindref="compound">tf::Taskflow</ref> </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>pred</parametername>
</parameternamelist>
<parameterdescription>
<para>a boolean predicate to return <computeroutput>true</computeroutput> for stop</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>a <ref refid="classtf_1_1Future" kindref="compound">tf::Future</ref> that holds the result of the execution</para>
</simplesect>
This member function executes the given taskflow multiple times until the predicate returns <computeroutput>true</computeroutput>. This member function returns a <ref refid="classtf_1_1Future" kindref="compound">tf::Future</ref> object that eventually holds the result of the execution.</para>
<para><programlisting filename=".cpp"><codeline><highlight class="normal"><ref refid="classtf_1_1Future" kindref="compound">tf::Future&lt;void&gt;</ref><sp/>future<sp/>=<sp/>executor.run_until(</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>taskflow,<sp/>[](){<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="cpp/numeric/random/rand" kindref="compound" external="/home/thuang295/Code/taskflow/doxygen/cppreference-doxygen-web.tag.xml">rand</ref>()%10<sp/>==<sp/>0<sp/>}</highlight></codeline>
<codeline><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>do<sp/>something<sp/>else</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">future.wait();</highlight></codeline>
</programlisting></para>
<para>This member function is thread-safe. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="taskflow/core/executor.hpp" line="323" column="14"/>
      </memberdef>
      <memberdef kind="function" id="classtf_1_1Executor_1a724d188df2952f64c1f2c60555a0a611" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename P</type>
          </param>
        </templateparamlist>
        <type><ref refid="classtf_1_1Future" kindref="compound">tf::Future</ref>&lt; void &gt;</type>
        <definition>tf::Future&lt;void&gt; tf::Executor::run_until</definition>
        <argsstring>(Taskflow &amp;&amp;taskflow, P &amp;&amp;pred)</argsstring>
        <name>run_until</name>
        <param>
          <type><ref refid="classtf_1_1Taskflow" kindref="compound">Taskflow</ref> &amp;&amp;</type>
          <declname>taskflow</declname>
        </param>
        <param>
          <type>P &amp;&amp;</type>
          <declname>pred</declname>
        </param>
        <briefdescription>
<para>runs a moved taskflow and keeps running it until the predicate becomes true </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>taskflow</parametername>
</parameternamelist>
<parameterdescription>
<para>a moved <ref refid="classtf_1_1Taskflow" kindref="compound">tf::Taskflow</ref> object </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>pred</parametername>
</parameternamelist>
<parameterdescription>
<para>a boolean predicate to return <computeroutput>true</computeroutput> for stop</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>a <ref refid="classtf_1_1Future" kindref="compound">tf::Future</ref> that holds the result of the execution</para>
</simplesect>
This member function executes a moved taskflow multiple times until the predicate returns <computeroutput>true</computeroutput>. This member function returns a <ref refid="classtf_1_1Future" kindref="compound">tf::Future</ref> object that eventually holds the result of the execution. The executor will take care of the lifetime of the moved taskflow.</para>
<para><programlisting filename=".cpp"><codeline><highlight class="normal"><ref refid="classtf_1_1Future" kindref="compound">tf::Future&lt;void&gt;</ref><sp/>future<sp/>=<sp/>executor.run_until(</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>std::move(taskflow),<sp/>[](){<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="cpp/numeric/random/rand" kindref="compound" external="/home/thuang295/Code/taskflow/doxygen/cppreference-doxygen-web.tag.xml">rand</ref>()%10<sp/>==<sp/>0<sp/>}</highlight></codeline>
<codeline><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>do<sp/>something<sp/>else</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">future.wait();</highlight></codeline>
</programlisting></para>
<para>This member function is thread-safe. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="taskflow/core/executor.hpp" line="351" column="14"/>
      </memberdef>
      <memberdef kind="function" id="classtf_1_1Executor_1a5ed30b8db88cdeb78fe3e8e2de4a84dd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename P</type>
          </param>
          <param>
            <type>typename C</type>
          </param>
        </templateparamlist>
        <type><ref refid="classtf_1_1Future" kindref="compound">tf::Future</ref>&lt; void &gt;</type>
        <definition>tf::Future&lt;void&gt; tf::Executor::run_until</definition>
        <argsstring>(Taskflow &amp;taskflow, P &amp;&amp;pred, C &amp;&amp;callable)</argsstring>
        <name>run_until</name>
        <param>
          <type><ref refid="classtf_1_1Taskflow" kindref="compound">Taskflow</ref> &amp;</type>
          <declname>taskflow</declname>
        </param>
        <param>
          <type>P &amp;&amp;</type>
          <declname>pred</declname>
        </param>
        <param>
          <type>C &amp;&amp;</type>
          <declname>callable</declname>
        </param>
        <briefdescription>
<para>runs a taskflow multiple times until the predicate becomes true and then invokes the callback </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>taskflow</parametername>
</parameternamelist>
<parameterdescription>
<para>a <ref refid="classtf_1_1Taskflow" kindref="compound">tf::Taskflow</ref> </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>pred</parametername>
</parameternamelist>
<parameterdescription>
<para>a boolean predicate to return <computeroutput>true</computeroutput> for stop </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>callable</parametername>
</parameternamelist>
<parameterdescription>
<para>a callable object to be invoked after this run completes</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>a <ref refid="classtf_1_1Future" kindref="compound">tf::Future</ref> that holds the result of the execution</para>
</simplesect>
This member function executes the given taskflow multiple times until the predicate returns <computeroutput>true</computeroutput> and then invokes the given callable when the execution completes. This member function returns a <ref refid="classtf_1_1Future" kindref="compound">tf::Future</ref> object that eventually holds the result of the execution.</para>
<para><programlisting filename=".cpp"><codeline><highlight class="normal"><ref refid="classtf_1_1Future" kindref="compound">tf::Future&lt;void&gt;</ref><sp/>future<sp/>=<sp/>executor.run_until(</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>taskflow,<sp/>[](){<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="cpp/numeric/random/rand" kindref="compound" external="/home/thuang295/Code/taskflow/doxygen/cppreference-doxygen-web.tag.xml">rand</ref>()%10<sp/>==<sp/>0<sp/>},<sp/>[](){<sp/><ref refid="cpp/io/basic_ostream" kindref="compound" external="/home/thuang295/Code/taskflow/doxygen/cppreference-doxygen-web.tag.xml">std::cout</ref><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;done&quot;</highlight><highlight class="normal">;<sp/>}</highlight></codeline>
<codeline><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>do<sp/>something<sp/>else</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">future.wait();</highlight></codeline>
</programlisting></para>
<para>This member function is thread-safe. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="taskflow/core/executor.hpp" line="380" column="14"/>
      </memberdef>
      <memberdef kind="function" id="classtf_1_1Executor_1ad7aa69f06309b9226a4046f8c400144e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename P</type>
          </param>
          <param>
            <type>typename C</type>
          </param>
        </templateparamlist>
        <type><ref refid="classtf_1_1Future" kindref="compound">tf::Future</ref>&lt; void &gt;</type>
        <definition>tf::Future&lt;void&gt; tf::Executor::run_until</definition>
        <argsstring>(Taskflow &amp;&amp;taskflow, P &amp;&amp;pred, C &amp;&amp;callable)</argsstring>
        <name>run_until</name>
        <param>
          <type><ref refid="classtf_1_1Taskflow" kindref="compound">Taskflow</ref> &amp;&amp;</type>
          <declname>taskflow</declname>
        </param>
        <param>
          <type>P &amp;&amp;</type>
          <declname>pred</declname>
        </param>
        <param>
          <type>C &amp;&amp;</type>
          <declname>callable</declname>
        </param>
        <briefdescription>
<para>runs a moved taskflow and keeps running it until the predicate becomes true and then invokes the callback </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>taskflow</parametername>
</parameternamelist>
<parameterdescription>
<para>a moved <ref refid="classtf_1_1Taskflow" kindref="compound">tf::Taskflow</ref> </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>pred</parametername>
</parameternamelist>
<parameterdescription>
<para>a boolean predicate to return <computeroutput>true</computeroutput> for stop </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>callable</parametername>
</parameternamelist>
<parameterdescription>
<para>a callable object to be invoked after this run completes</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>a <ref refid="classtf_1_1Future" kindref="compound">tf::Future</ref> that holds the result of the execution</para>
</simplesect>
This member function executes a moved taskflow multiple times until the predicate returns <computeroutput>true</computeroutput> and then invokes the given callable when the execution completes. This member function returns a <ref refid="classtf_1_1Future" kindref="compound">tf::Future</ref> object that eventually holds the result of the execution. The executor will take care of the lifetime of the moved taskflow.</para>
<para><programlisting filename=".cpp"><codeline><highlight class="normal"><ref refid="classtf_1_1Future" kindref="compound">tf::Future&lt;void&gt;</ref><sp/>future<sp/>=<sp/>executor.run_until(</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>std::move(taskflow),</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>[](){<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="cpp/numeric/random/rand" kindref="compound" external="/home/thuang295/Code/taskflow/doxygen/cppreference-doxygen-web.tag.xml">rand</ref>()%10<sp/>==<sp/>0<sp/>},<sp/>[](){<sp/><ref refid="cpp/io/basic_ostream" kindref="compound" external="/home/thuang295/Code/taskflow/doxygen/cppreference-doxygen-web.tag.xml">std::cout</ref><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;done&quot;</highlight><highlight class="normal">;<sp/>}</highlight></codeline>
<codeline><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>do<sp/>something<sp/>else</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">future.wait();</highlight></codeline>
</programlisting></para>
<para>This member function is thread-safe. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="taskflow/core/executor.hpp" line="411" column="14"/>
      </memberdef>
      <memberdef kind="function" id="classtf_1_1Executor_1a8fcd9e0557922bb8194999f0cd433ea8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void tf::Executor::corun</definition>
        <argsstring>(T &amp;target)</argsstring>
        <name>corun</name>
        <param>
          <type>T &amp;</type>
          <declname>target</declname>
        </param>
        <briefdescription>
<para>runs a target graph and waits until it completes using an internal worker of this executor </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>T</parametername>
</parameternamelist>
<parameterdescription>
<para>target type which has <computeroutput><ref refid="classtf_1_1Graph" kindref="compound">tf::Graph</ref>&amp; T::graph()</computeroutput> defined </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>target</parametername>
</parameternamelist>
<parameterdescription>
<para>the target task graph object</para>
</parameterdescription>
</parameteritem>
</parameterlist>
The method coruns a target graph cooperatively with other workers in the same executor and block until the execution completes. Under cooperative execution, a worker is not preempted. Instead, it continues participating in the work-stealing loop, executing available tasks alongside other workers. <linebreak/>
</para>
<para><programlisting filename=".cpp"><codeline><highlight class="normal"><ref refid="classtf_1_1Executor" kindref="compound">tf::Executor</ref><sp/>executor(2);</highlight></codeline>
<codeline><highlight class="normal"><ref refid="classtf_1_1Taskflow" kindref="compound">tf::Taskflow</ref><sp/>taskflow;</highlight></codeline>
<codeline><highlight class="normal"><ref refid="cpp/container/array" kindref="compound" external="/home/thuang295/Code/taskflow/doxygen/cppreference-doxygen-web.tag.xml">std::array&lt;tf::Taskflow, 1000&gt;</ref><sp/>others;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><ref refid="cpp/atomic/atomic" kindref="compound" external="/home/thuang295/Code/taskflow/doxygen/cppreference-doxygen-web.tag.xml">std::atomic&lt;size_t&gt;</ref><sp/>counter{0};</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>n=0;<sp/>n&lt;1000;<sp/>n++)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>i=0;<sp/>i&lt;1000;<sp/>i++)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>others[n].emplace([&amp;](){<sp/>counter++;<sp/>});</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>taskflow.<ref refid="classtf_1_1FlowBuilder_1a60d7a666cab71ecfa3010b2efb0d6b57" kindref="member">emplace</ref>([&amp;executor,<sp/>&amp;<ref refid="namespacetf" kindref="compound">tf</ref>=others[n]](){</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>executor.corun(<ref refid="namespacetf" kindref="compound">tf</ref>);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//executor.run(tf).wait();<sp/><sp/>&lt;-<sp/>blocking<sp/>the<sp/>worker<sp/>without<sp/>doing<sp/>anything</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>will<sp/>introduce<sp/>deadlock</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>});</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline><highlight class="normal">executor.run(taskflow).wait();</highlight></codeline>
</programlisting></para>
<para>The method is thread-safe as long as the target is not concurrently ran by two or more threads.</para>
<para><simplesect kind="attention"><para>You must call <ref refid="classtf_1_1Executor_1a8fcd9e0557922bb8194999f0cd433ea8" kindref="member">tf::Executor::corun</ref> from a worker of the calling executor or an exception will be thrown. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="taskflow/core/executor.hpp" line="454" column="8"/>
      </memberdef>
      <memberdef kind="function" id="classtf_1_1Executor_1a0fc6eb19f168dc4a9cd0a7c6187c1d2d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename P</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void tf::Executor::corun_until</definition>
        <argsstring>(P &amp;&amp;predicate)</argsstring>
        <name>corun_until</name>
        <param>
          <type>P &amp;&amp;</type>
          <declname>predicate</declname>
        </param>
        <briefdescription>
<para>keeps running the work-stealing loop until the predicate returns <computeroutput>true</computeroutput> </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>P</parametername>
</parameternamelist>
<parameterdescription>
<para>predicate type </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>predicate</parametername>
</parameternamelist>
<parameterdescription>
<para>a boolean predicate to indicate when to stop the loop</para>
</parameterdescription>
</parameteritem>
</parameterlist>
The method keeps the caller worker running in the work-stealing loop until the stop predicate becomes true.</para>
<para>The method keeps the calling worker running available tasks cooperatively with other workers in the same executor and block until the predicate return <computeroutput>true</computeroutput>. Under cooperative execution, a worker is not preempted. Instead, it continues participating in the work-stealing loop, executing available tasks alongside other workers. <linebreak/>
</para>
<para><programlisting filename=".cpp"><codeline><highlight class="normal">taskflow.emplace([&amp;](){</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="cpp/thread/future" kindref="compound" external="/home/thuang295/Code/taskflow/doxygen/cppreference-doxygen-web.tag.xml">std::future&lt;void&gt;</ref><sp/>fu<sp/>=<sp/><ref refid="cpp/thread/async" kindref="compound" external="/home/thuang295/Code/taskflow/doxygen/cppreference-doxygen-web.tag.xml">std::async</ref>([](){<sp/>std::sleep(100s);<sp/>});</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>executor.corun_until([](){</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>fu.wait_for(<ref refid="cpp/chrono/duration" kindref="compound" external="/home/thuang295/Code/taskflow/doxygen/cppreference-doxygen-web.tag.xml">std::chrono::seconds</ref>(0))<sp/>==<sp/>future_status::ready;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>});</highlight></codeline>
<codeline><highlight class="normal">});</highlight></codeline>
</programlisting></para>
<para><simplesect kind="attention"><para>You must call <ref refid="classtf_1_1Executor_1a0fc6eb19f168dc4a9cd0a7c6187c1d2d" kindref="member">tf::Executor::corun_until</ref> from a worker of the calling executor or an exception will be thrown. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="taskflow/core/executor.hpp" line="486" column="8"/>
      </memberdef>
      <memberdef kind="function" id="classtf_1_1Executor_1ab9aa252f70e9a40020a1e5a89d485b85" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void tf::Executor::wait_for_all</definition>
        <argsstring>()</argsstring>
        <name>wait_for_all</name>
        <briefdescription>
<para>waits for all tasks to complete </para>
        </briefdescription>
        <detaileddescription>
<para>This member function waits until all submitted tasks (e.g., taskflows, asynchronous tasks) to finish.</para>
<para><programlisting filename=".cpp"><codeline><highlight class="normal">executor.run(taskflow1);</highlight></codeline>
<codeline><highlight class="normal">executor.run_n(taskflow2,<sp/>10);</highlight></codeline>
<codeline><highlight class="normal">executor.run_n(taskflow3,<sp/>100);</highlight></codeline>
<codeline><highlight class="normal">executor.wait_for_all();<sp/><sp/></highlight><highlight class="comment">//<sp/>wait<sp/>until<sp/>the<sp/>above<sp/>submitted<sp/>taskflows<sp/>finish</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="taskflow/core/executor.hpp" line="501" column="8"/>
      </memberdef>
      <memberdef kind="function" id="classtf_1_1Executor_1a9d2d464ab2a84ecb3b3ea7747e8e276b" prot="public" static="no" const="yes" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type>size_t</type>
        <definition>size_t tf::Executor::num_workers</definition>
        <argsstring>() const noexcept</argsstring>
        <name>num_workers</name>
        <briefdescription>
<para>queries the number of worker threads </para>
        </briefdescription>
        <detaileddescription>
<para>Each worker represents one unique thread spawned by an executor upon its construction time.</para>
<para><programlisting filename=".cpp"><codeline><highlight class="normal"><ref refid="classtf_1_1Executor" kindref="compound">tf::Executor</ref><sp/>executor(4);</highlight></codeline>
<codeline><highlight class="normal"><ref refid="cpp/io/basic_ostream" kindref="compound" external="/home/thuang295/Code/taskflow/doxygen/cppreference-doxygen-web.tag.xml">std::cout</ref><sp/>&lt;&lt;<sp/>executor.num_workers();<sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>4</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="taskflow/core/executor.hpp" line="514" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classtf_1_1Executor_1a5205c78ec06ef01de0c7d6a71adad07a" prot="public" static="no" const="yes" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type>size_t</type>
        <definition>size_t tf::Executor::num_waiters</definition>
        <argsstring>() const noexcept</argsstring>
        <name>num_waiters</name>
        <briefdescription>
<para>queries the number of workers that are currently not making any stealing attempts </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="taskflow/core/executor.hpp" line="519" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classtf_1_1Executor_1a68875600becd2b6593d0e7518896ab2b" prot="public" static="no" const="yes" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type>size_t</type>
        <definition>size_t tf::Executor::num_queues</definition>
        <argsstring>() const noexcept</argsstring>
        <name>num_queues</name>
        <briefdescription>
<para>queries the number of queues used in the work-stealing loop </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="taskflow/core/executor.hpp" line="524" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classtf_1_1Executor_1a6d6c28ed58211e4c27a99571e5bf0b6c" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>size_t</type>
        <definition>size_t tf::Executor::num_topologies</definition>
        <argsstring>() const</argsstring>
        <name>num_topologies</name>
        <briefdescription>
<para>queries the number of running topologies at the time of this call </para>
        </briefdescription>
        <detaileddescription>
<para>When a taskflow is submitted to an executor, a topology is created to store runtime metadata of the running taskflow. When the execution of the submitted taskflow finishes, its corresponding topology will be removed from the executor.</para>
<para><programlisting filename=".cpp"><codeline><highlight class="normal">executor.run(taskflow);</highlight></codeline>
<codeline><highlight class="normal"><ref refid="cpp/io/basic_ostream" kindref="compound" external="/home/thuang295/Code/taskflow/doxygen/cppreference-doxygen-web.tag.xml">std::cout</ref><sp/>&lt;&lt;<sp/>executor.num_topologies();<sp/><sp/></highlight><highlight class="comment">//<sp/>0<sp/>or<sp/>1<sp/>(taskflow<sp/>still<sp/>running)</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="taskflow/core/executor.hpp" line="539" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classtf_1_1Executor_1a5fb438dc0f7b9e1ae2fe3f240c82f174" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>size_t</type>
        <definition>size_t tf::Executor::num_taskflows</definition>
        <argsstring>() const</argsstring>
        <name>num_taskflows</name>
        <briefdescription>
<para>queries the number of running taskflows with moved ownership </para>
        </briefdescription>
        <detaileddescription>
<para><programlisting filename=".cpp"><codeline><highlight class="normal">executor.run(std::move(taskflow));</highlight></codeline>
<codeline><highlight class="normal"><ref refid="cpp/io/basic_ostream" kindref="compound" external="/home/thuang295/Code/taskflow/doxygen/cppreference-doxygen-web.tag.xml">std::cout</ref><sp/>&lt;&lt;<sp/>executor.num_taskflows();<sp/><sp/></highlight><highlight class="comment">//<sp/>0<sp/>or<sp/>1<sp/>(taskflow<sp/>still<sp/>running)</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="taskflow/core/executor.hpp" line="549" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classtf_1_1Executor_1a4f388dd1dc6e949d04a6beec1d146f89" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classtf_1_1Worker" kindref="compound">Worker</ref> *</type>
        <definition>Worker* tf::Executor::this_worker</definition>
        <argsstring>()</argsstring>
        <name>this_worker</name>
        <briefdescription>
<para>queries pointer to the calling worker if it belongs to this executor, otherwise returns <computeroutput>nullptr</computeroutput> </para>
        </briefdescription>
        <detaileddescription>
<para>Returns a pointer to the per-worker storage associated with this executor. If the calling thread is not a worker of this executor, the function returns <computeroutput>nullptr</computeroutput>.</para>
<para><programlisting filename=".cpp"><codeline><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>w<sp/>=<sp/>executor.this_worker();</highlight></codeline>
<codeline><highlight class="normal"><ref refid="classtf_1_1Taskflow" kindref="compound">tf::Taskflow</ref><sp/>taskflow;</highlight></codeline>
<codeline><highlight class="normal"><ref refid="classtf_1_1Executor" kindref="compound">tf::Executor</ref><sp/>executor;</highlight></codeline>
<codeline><highlight class="normal">executor.<ref refid="classtf_1_1Executor_1af960048056f7c6b5bc71f4f526f05df7" kindref="member">async</ref>([&amp;](){</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>assert(executor.<ref refid="classtf_1_1Executor_1a4f388dd1dc6e949d04a6beec1d146f89" kindref="member">this_worker</ref>()<sp/>!=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>assert(executor.<ref refid="classtf_1_1Executor_1a4f388dd1dc6e949d04a6beec1d146f89" kindref="member">this_worker</ref>()-&gt;<ref refid="classtf_1_1Worker_1a0fcc11826d72537655bf9bb50b68a3f5" kindref="member">executor</ref>()<sp/>==<sp/>&amp;executor);</highlight></codeline>
<codeline><highlight class="normal">});</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="taskflow/core/executor.hpp" line="567" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classtf_1_1Executor_1a6487d589cb1f6b078b69fd3bb1082345" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int tf::Executor::this_worker_id</definition>
        <argsstring>() const</argsstring>
        <name>this_worker_id</name>
        <briefdescription>
<para>queries the id of the caller thread within this executor </para>
        </briefdescription>
        <detaileddescription>
<para>Each worker has an unique id in the range of <computeroutput>0</computeroutput> to <computeroutput>N-1</computeroutput> associated with its parent executor. If the caller thread does not belong to the executor, <computeroutput>-1</computeroutput> is returned.</para>
<para><programlisting filename=".cpp"><codeline><highlight class="normal"><ref refid="classtf_1_1Executor" kindref="compound">tf::Executor</ref><sp/>executor(4);<sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>4<sp/>workers<sp/>in<sp/>the<sp/>executor</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">executor.this_worker_id();<sp/><sp/></highlight><highlight class="comment">//<sp/>-1<sp/>(main<sp/>thread<sp/>is<sp/>not<sp/>a<sp/>worker)</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">taskflow.emplace([&amp;](){</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="cpp/io/basic_ostream" kindref="compound" external="/home/thuang295/Code/taskflow/doxygen/cppreference-doxygen-web.tag.xml">std::cout</ref><sp/>&lt;&lt;<sp/>executor.this_worker_id();<sp/><sp/></highlight><highlight class="comment">//<sp/>0,<sp/>1,<sp/>2,<sp/>or<sp/>3</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">});</highlight></codeline>
<codeline><highlight class="normal">executor.run(taskflow);</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="taskflow/core/executor.hpp" line="586" column="7"/>
      </memberdef>
      <memberdef kind="function" id="classtf_1_1Executor_1ab5a793a0f2ce41cd49ca45e9f0a6962c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Observer</type>
          </param>
          <param>
            <type>typename...</type>
            <declname>ArgsT</declname>
            <defname>ArgsT</defname>
          </param>
        </templateparamlist>
        <type><ref refid="cpp/memory/shared_ptr" kindref="compound" external="/home/thuang295/Code/taskflow/doxygen/cppreference-doxygen-web.tag.xml">std::shared_ptr</ref>&lt; Observer &gt;</type>
        <definition>std::shared_ptr&lt;Observer&gt; tf::Executor::make_observer</definition>
        <argsstring>(ArgsT &amp;&amp;... args)</argsstring>
        <name>make_observer</name>
        <param>
          <type>ArgsT &amp;&amp;...</type>
          <declname>args</declname>
        </param>
        <briefdescription>
<para>constructs an observer to inspect the activities of worker threads </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>Observer</parametername>
</parameternamelist>
<parameterdescription>
<para>observer type derived from <ref refid="classtf_1_1ObserverInterface" kindref="compound">tf::ObserverInterface</ref> </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ArgsT</parametername>
</parameternamelist>
<parameterdescription>
<para>argument parameter pack</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>args</parametername>
</parameternamelist>
<parameterdescription>
<para>arguments to forward to the constructor of the observer</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>a shared pointer to the created observer</para>
</simplesect>
Each executor manages a list of observers with shared ownership with callers. For each of these observers, the two member functions, <ref refid="classtf_1_1ObserverInterface_1a8225fcacb03089677a1efc4b16b734cc" kindref="member">tf::ObserverInterface::on_entry</ref> and <ref refid="classtf_1_1ObserverInterface_1aa22f5378154653f08d9a58326bda4754" kindref="member">tf::ObserverInterface::on_exit</ref> will be called before and after the execution of a task.</para>
<para>This member function is not thread-safe. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="taskflow/core/executor.hpp" line="610" column="19"/>
      </memberdef>
      <memberdef kind="function" id="classtf_1_1Executor_1a31081f492c376f7b798de0e430534531" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Observer</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void tf::Executor::remove_observer</definition>
        <argsstring>(std::shared_ptr&lt; Observer &gt; observer)</argsstring>
        <name>remove_observer</name>
        <param>
          <type><ref refid="cpp/memory/shared_ptr" kindref="compound" external="/home/thuang295/Code/taskflow/doxygen/cppreference-doxygen-web.tag.xml">std::shared_ptr</ref>&lt; Observer &gt;</type>
          <declname>observer</declname>
        </param>
        <briefdescription>
<para>removes an observer from the executor </para>
        </briefdescription>
        <detaileddescription>
<para>This member function is not thread-safe. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="taskflow/core/executor.hpp" line="618" column="8"/>
      </memberdef>
      <memberdef kind="function" id="classtf_1_1Executor_1affec621aae59d73fc188ef454008fda2" prot="public" static="no" const="yes" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type>size_t</type>
        <definition>size_t tf::Executor::num_observers</definition>
        <argsstring>() const noexcept</argsstring>
        <name>num_observers</name>
        <briefdescription>
<para>queries the number of observers </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="taskflow/core/executor.hpp" line="623" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classtf_1_1Executor_1af960048056f7c6b5bc71f4f526f05df7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename P</type>
          </param>
          <param>
            <type>typename F</type>
          </param>
        </templateparamlist>
        <type>auto</type>
        <definition>auto tf::Executor::async</definition>
        <argsstring>(P &amp;&amp;params, F &amp;&amp;func)</argsstring>
        <name>async</name>
        <param>
          <type>P &amp;&amp;</type>
          <declname>params</declname>
        </param>
        <param>
          <type>F &amp;&amp;</type>
          <declname>func</declname>
        </param>
        <briefdescription>
<para>creates a parameterized asynchronous task to run the given function </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>P</parametername>
</parameternamelist>
<parameterdescription>
<para>task parameter type </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>F</parametername>
</parameternamelist>
<parameterdescription>
<para>callable type</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>params</parametername>
</parameternamelist>
<parameterdescription>
<para>task parameters </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>func</parametername>
</parameternamelist>
<parameterdescription>
<para>callable object</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>a <ulink url="https://en.cppreference.com/w/cpp/thread/future">std::future</ulink> that will hold the result of the execution</para>
</simplesect>
The method creates a parameterized asynchronous task to run the given function and return a <ulink url="https://en.cppreference.com/w/cpp/thread/future">std::future</ulink> object that eventually will hold the result of the execution.</para>
<para><programlisting filename=".cpp"><codeline><highlight class="normal"><ref refid="cpp/thread/future" kindref="compound" external="/home/thuang295/Code/taskflow/doxygen/cppreference-doxygen-web.tag.xml">std::future&lt;int&gt;</ref><sp/>future<sp/>=<sp/>executor.async(</highlight><highlight class="stringliteral">&quot;name&quot;</highlight><highlight class="normal">,<sp/>[](){</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="cpp/io/basic_ostream" kindref="compound" external="/home/thuang295/Code/taskflow/doxygen/cppreference-doxygen-web.tag.xml">std::cout</ref><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;create<sp/>an<sp/>asynchronous<sp/>task<sp/>with<sp/>a<sp/>name<sp/>and<sp/>returns<sp/>1\n&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>1;</highlight></codeline>
<codeline><highlight class="normal">});</highlight></codeline>
<codeline><highlight class="normal">future.get();</highlight></codeline>
</programlisting></para>
<para>This member function is thread-safe. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="taskflow/core/executor.hpp" line="655" column="8"/>
      </memberdef>
      <memberdef kind="function" id="classtf_1_1Executor_1a28bdb43837bd6b548e092154e4df5dd9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename F</type>
          </param>
        </templateparamlist>
        <type>auto</type>
        <definition>auto tf::Executor::async</definition>
        <argsstring>(F &amp;&amp;func)</argsstring>
        <name>async</name>
        <param>
          <type>F &amp;&amp;</type>
          <declname>func</declname>
        </param>
        <briefdescription>
<para>runs a given function asynchronously </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>F</parametername>
</parameternamelist>
<parameterdescription>
<para>callable type</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>func</parametername>
</parameternamelist>
<parameterdescription>
<para>callable object</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>a <ulink url="https://en.cppreference.com/w/cpp/thread/future">std::future</ulink> that will hold the result of the execution</para>
</simplesect>
The method creates an asynchronous task to run the given function and return a <ulink url="https://en.cppreference.com/w/cpp/thread/future">std::future</ulink> object that eventually will hold the result of the return value.</para>
<para><programlisting filename=".cpp"><codeline><highlight class="normal"><ref refid="cpp/thread/future" kindref="compound" external="/home/thuang295/Code/taskflow/doxygen/cppreference-doxygen-web.tag.xml">std::future&lt;int&gt;</ref><sp/>future<sp/>=<sp/>executor.async([](){</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="cpp/io/basic_ostream" kindref="compound" external="/home/thuang295/Code/taskflow/doxygen/cppreference-doxygen-web.tag.xml">std::cout</ref><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;create<sp/>an<sp/>asynchronous<sp/>task<sp/>and<sp/>returns<sp/>1\n&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>1;</highlight></codeline>
<codeline><highlight class="normal">});</highlight></codeline>
<codeline><highlight class="normal">future.get();</highlight></codeline>
</programlisting></para>
<para>This member function is thread-safe. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="taskflow/core/executor.hpp" line="681" column="8"/>
      </memberdef>
      <memberdef kind="function" id="classtf_1_1Executor_1a0461cb2c459c9f9473c72af06af9c701" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename P</type>
          </param>
          <param>
            <type>typename F</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void tf::Executor::silent_async</definition>
        <argsstring>(P &amp;&amp;params, F &amp;&amp;func)</argsstring>
        <name>silent_async</name>
        <param>
          <type>P &amp;&amp;</type>
          <declname>params</declname>
        </param>
        <param>
          <type>F &amp;&amp;</type>
          <declname>func</declname>
        </param>
        <briefdescription>
<para>similar to <ref refid="classtf_1_1Executor_1af960048056f7c6b5bc71f4f526f05df7" kindref="member">tf::Executor::async</ref> but does not return a future object </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>F</parametername>
</parameternamelist>
<parameterdescription>
<para>callable type</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>params</parametername>
</parameternamelist>
<parameterdescription>
<para>task parameters </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>func</parametername>
</parameternamelist>
<parameterdescription>
<para>callable object</para>
</parameterdescription>
</parameteritem>
</parameterlist>
The method creates a parameterized asynchronous task to run the given function without returning any <ulink url="https://en.cppreference.com/w/cpp/thread/future">std::future</ulink> object. This member function is more efficient than <ref refid="classtf_1_1Executor_1af960048056f7c6b5bc71f4f526f05df7" kindref="member">tf::Executor::async</ref> and is encouraged to use when applications do not need a <ulink url="https://en.cppreference.com/w/cpp/thread/future">std::future</ulink> to acquire the result or synchronize the execution.</para>
<para><programlisting filename=".cpp"><codeline><highlight class="normal">executor.silent_async(</highlight><highlight class="stringliteral">&quot;name&quot;</highlight><highlight class="normal">,<sp/>[](){</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="cpp/io/basic_ostream" kindref="compound" external="/home/thuang295/Code/taskflow/doxygen/cppreference-doxygen-web.tag.xml">std::cout</ref><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;create<sp/>an<sp/>asynchronous<sp/>task<sp/>with<sp/>a<sp/>name<sp/>and<sp/>no<sp/>return\n&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline><highlight class="normal">});</highlight></codeline>
<codeline><highlight class="normal">executor.wait_for_all();</highlight></codeline>
</programlisting></para>
<para>This member function is thread-safe. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="taskflow/core/executor.hpp" line="707" column="8"/>
      </memberdef>
      <memberdef kind="function" id="classtf_1_1Executor_1a878ec1bc337c7efe22619b21ba3ecdf3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename F</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void tf::Executor::silent_async</definition>
        <argsstring>(F &amp;&amp;func)</argsstring>
        <name>silent_async</name>
        <param>
          <type>F &amp;&amp;</type>
          <declname>func</declname>
        </param>
        <briefdescription>
<para>similar to <ref refid="classtf_1_1Executor_1af960048056f7c6b5bc71f4f526f05df7" kindref="member">tf::Executor::async</ref> but does not return a future object </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>F</parametername>
</parameternamelist>
<parameterdescription>
<para>callable type</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>func</parametername>
</parameternamelist>
<parameterdescription>
<para>callable object</para>
</parameterdescription>
</parameteritem>
</parameterlist>
The method creates an asynchronous task to run the given function without returning any <ulink url="https://en.cppreference.com/w/cpp/thread/future">std::future</ulink> object. This member function is more efficient than <ref refid="classtf_1_1Executor_1af960048056f7c6b5bc71f4f526f05df7" kindref="member">tf::Executor::async</ref> and is encouraged to use when applications do not need a <ulink url="https://en.cppreference.com/w/cpp/thread/future">std::future</ulink> to acquire the result or synchronize the execution.</para>
<para><programlisting filename=".cpp"><codeline><highlight class="normal">executor.silent_async([](){</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="cpp/io/basic_ostream" kindref="compound" external="/home/thuang295/Code/taskflow/doxygen/cppreference-doxygen-web.tag.xml">std::cout</ref><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;create<sp/>an<sp/>asynchronous<sp/>task<sp/>with<sp/>no<sp/>return\n&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline><highlight class="normal">});</highlight></codeline>
<codeline><highlight class="normal">executor.wait_for_all();</highlight></codeline>
</programlisting></para>
<para>This member function is thread-safe. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="taskflow/core/executor.hpp" line="732" column="8"/>
      </memberdef>
      <memberdef kind="function" id="classtf_1_1Executor_1a0e2d792f28136b8227b413d0c27d5c7f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename F</type>
          </param>
          <param>
            <type>typename...</type>
            <declname>Tasks</declname>
            <defname>Tasks</defname>
          </param>
          <param>
            <type>std::enable_if_t&lt; all_same_v&lt; <ref refid="classtf_1_1AsyncTask" kindref="compound">AsyncTask</ref>, std::decay_t&lt; Tasks &gt;... &gt;, void &gt; *</type>
            <defval>nullptr</defval>
          </param>
        </templateparamlist>
        <type><ref refid="classtf_1_1AsyncTask" kindref="compound">tf::AsyncTask</ref></type>
        <definition>tf::AsyncTask tf::Executor::silent_dependent_async</definition>
        <argsstring>(F &amp;&amp;func, Tasks &amp;&amp;... tasks)</argsstring>
        <name>silent_dependent_async</name>
        <param>
          <type>F &amp;&amp;</type>
          <declname>func</declname>
        </param>
        <param>
          <type>Tasks &amp;&amp;...</type>
          <declname>tasks</declname>
        </param>
        <briefdescription>
<para>runs the given function asynchronously when the given predecessors finish </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>F</parametername>
</parameternamelist>
<parameterdescription>
<para>callable type </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>Tasks</parametername>
</parameternamelist>
<parameterdescription>
<para>task types convertible to <ref refid="classtf_1_1AsyncTask" kindref="compound">tf::AsyncTask</ref></para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>func</parametername>
</parameternamelist>
<parameterdescription>
<para>callable object </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>tasks</parametername>
</parameternamelist>
<parameterdescription>
<para>asynchronous tasks on which this execution depends</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>a <ref refid="classtf_1_1AsyncTask" kindref="compound">tf::AsyncTask</ref> handle</para>
</simplesect>
This member function is more efficient than <ref refid="classtf_1_1Executor_1aee02b63d3a91ad5ca5a1c0e71f3e128f" kindref="member">tf::Executor::dependent_async</ref> and is encouraged to use when you do not want a <ulink url="https://en.cppreference.com/w/cpp/thread/future">std::future</ulink> to acquire the result or synchronize the execution. The example below creates three asynchronous tasks, <computeroutput>A</computeroutput>, <computeroutput>B</computeroutput>, and <computeroutput>C</computeroutput>, in which task <computeroutput>C</computeroutput> runs after task <computeroutput>A</computeroutput> and task <computeroutput>B</computeroutput>.</para>
<para><programlisting filename=".cpp"><codeline><highlight class="normal"><ref refid="classtf_1_1AsyncTask" kindref="compound">tf::AsyncTask</ref><sp/>A<sp/>=<sp/>executor.silent_dependent_async([](){<sp/><ref refid="cpp/io/c/fprintf" kindref="compound" external="/home/thuang295/Code/taskflow/doxygen/cppreference-doxygen-web.tag.xml">printf</ref>(</highlight><highlight class="stringliteral">&quot;A\n&quot;</highlight><highlight class="normal">);<sp/>});</highlight></codeline>
<codeline><highlight class="normal"><ref refid="classtf_1_1AsyncTask" kindref="compound">tf::AsyncTask</ref><sp/>B<sp/>=<sp/>executor.silent_dependent_async([](){<sp/><ref refid="cpp/io/c/fprintf" kindref="compound" external="/home/thuang295/Code/taskflow/doxygen/cppreference-doxygen-web.tag.xml">printf</ref>(</highlight><highlight class="stringliteral">&quot;B\n&quot;</highlight><highlight class="normal">);<sp/>});</highlight></codeline>
<codeline><highlight class="normal">executor.silent_dependent_async([](){<sp/><ref refid="cpp/io/c/fprintf" kindref="compound" external="/home/thuang295/Code/taskflow/doxygen/cppreference-doxygen-web.tag.xml">printf</ref>(</highlight><highlight class="stringliteral">&quot;C<sp/>runs<sp/>after<sp/>A<sp/>and<sp/>B\n&quot;</highlight><highlight class="normal">);<sp/>},<sp/>A,<sp/>B);</highlight></codeline>
<codeline><highlight class="normal">executor.wait_for_all();</highlight></codeline>
</programlisting></para>
<para>This member function is thread-safe. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="taskflow/core/executor.hpp" line="768" column="17"/>
      </memberdef>
      <memberdef kind="function" id="classtf_1_1Executor_1abbf277ddbe4974e928361f232149341e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename P</type>
          </param>
          <param>
            <type>typename F</type>
          </param>
          <param>
            <type>typename...</type>
            <declname>Tasks</declname>
            <defname>Tasks</defname>
          </param>
          <param>
            <type>std::enable_if_t&lt; <ref refid="namespacetf_1ad3a41adc2499a9519da3e77dc3e9849c" kindref="member">is_task_params_v</ref>&lt; P &gt; &amp;&amp;all_same_v&lt; <ref refid="classtf_1_1AsyncTask" kindref="compound">AsyncTask</ref>, std::decay_t&lt; Tasks &gt;... &gt;, void &gt; *</type>
            <defval>nullptr</defval>
          </param>
        </templateparamlist>
        <type><ref refid="classtf_1_1AsyncTask" kindref="compound">tf::AsyncTask</ref></type>
        <definition>tf::AsyncTask tf::Executor::silent_dependent_async</definition>
        <argsstring>(P &amp;&amp;params, F &amp;&amp;func, Tasks &amp;&amp;... tasks)</argsstring>
        <name>silent_dependent_async</name>
        <param>
          <type>P &amp;&amp;</type>
          <declname>params</declname>
        </param>
        <param>
          <type>F &amp;&amp;</type>
          <declname>func</declname>
        </param>
        <param>
          <type>Tasks &amp;&amp;...</type>
          <declname>tasks</declname>
        </param>
        <briefdescription>
<para>runs the given function asynchronously when the given predecessors finish </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>F</parametername>
</parameternamelist>
<parameterdescription>
<para>callable type </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>Tasks</parametername>
</parameternamelist>
<parameterdescription>
<para>task types convertible to <ref refid="classtf_1_1AsyncTask" kindref="compound">tf::AsyncTask</ref></para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>params</parametername>
</parameternamelist>
<parameterdescription>
<para>task parameters </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>func</parametername>
</parameternamelist>
<parameterdescription>
<para>callable object </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>tasks</parametername>
</parameternamelist>
<parameterdescription>
<para>asynchronous tasks on which this execution depends</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>a <ref refid="classtf_1_1AsyncTask" kindref="compound">tf::AsyncTask</ref> handle</para>
</simplesect>
This member function is more efficient than <ref refid="classtf_1_1Executor_1aee02b63d3a91ad5ca5a1c0e71f3e128f" kindref="member">tf::Executor::dependent_async</ref> and is encouraged to use when you do not want a <ulink url="https://en.cppreference.com/w/cpp/thread/future">std::future</ulink> to acquire the result or synchronize the execution. The example below creates three asynchronous tasks, <computeroutput>A</computeroutput>, <computeroutput>B</computeroutput>, and <computeroutput>C</computeroutput>, in which task <computeroutput>C</computeroutput> runs after task <computeroutput>A</computeroutput> and task <computeroutput>B</computeroutput>. Assigned task names will appear in the observers of the executor.</para>
<para><programlisting filename=".cpp"><codeline><highlight class="normal"><ref refid="classtf_1_1AsyncTask" kindref="compound">tf::AsyncTask</ref><sp/>A<sp/>=<sp/>executor.silent_dependent_async(</highlight><highlight class="stringliteral">&quot;A&quot;</highlight><highlight class="normal">,<sp/>[](){<sp/><ref refid="cpp/io/c/fprintf" kindref="compound" external="/home/thuang295/Code/taskflow/doxygen/cppreference-doxygen-web.tag.xml">printf</ref>(</highlight><highlight class="stringliteral">&quot;A\n&quot;</highlight><highlight class="normal">);<sp/>});</highlight></codeline>
<codeline><highlight class="normal"><ref refid="classtf_1_1AsyncTask" kindref="compound">tf::AsyncTask</ref><sp/>B<sp/>=<sp/>executor.silent_dependent_async(</highlight><highlight class="stringliteral">&quot;B&quot;</highlight><highlight class="normal">,<sp/>[](){<sp/><ref refid="cpp/io/c/fprintf" kindref="compound" external="/home/thuang295/Code/taskflow/doxygen/cppreference-doxygen-web.tag.xml">printf</ref>(</highlight><highlight class="stringliteral">&quot;B\n&quot;</highlight><highlight class="normal">);<sp/>});</highlight></codeline>
<codeline><highlight class="normal">executor.silent_dependent_async(</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="stringliteral">&quot;C&quot;</highlight><highlight class="normal">,<sp/>[](){<sp/><ref refid="cpp/io/c/fprintf" kindref="compound" external="/home/thuang295/Code/taskflow/doxygen/cppreference-doxygen-web.tag.xml">printf</ref>(</highlight><highlight class="stringliteral">&quot;C<sp/>runs<sp/>after<sp/>A<sp/>and<sp/>B\n&quot;</highlight><highlight class="normal">);<sp/>},<sp/>A,<sp/>B</highlight></codeline>
<codeline><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">executor.wait_for_all();</highlight></codeline>
</programlisting></para>
<para>This member function is thread-safe. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="taskflow/core/executor.hpp" line="804" column="17"/>
      </memberdef>
      <memberdef kind="function" id="classtf_1_1Executor_1aa9b08e47e68ae1e568f18aa7104cb9b1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename F</type>
          </param>
          <param>
            <type>typename I</type>
          </param>
          <param>
            <type>std::enable_if_t&lt;!std::is_same_v&lt; std::decay_t&lt; I &gt;, <ref refid="classtf_1_1AsyncTask" kindref="compound">AsyncTask</ref> &gt;, void &gt; *</type>
            <defval>nullptr</defval>
          </param>
        </templateparamlist>
        <type><ref refid="classtf_1_1AsyncTask" kindref="compound">tf::AsyncTask</ref></type>
        <definition>tf::AsyncTask tf::Executor::silent_dependent_async</definition>
        <argsstring>(F &amp;&amp;func, I first, I last)</argsstring>
        <name>silent_dependent_async</name>
        <param>
          <type>F &amp;&amp;</type>
          <declname>func</declname>
        </param>
        <param>
          <type>I</type>
          <declname>first</declname>
        </param>
        <param>
          <type>I</type>
          <declname>last</declname>
        </param>
        <briefdescription>
<para>runs the given function asynchronously when the given range of predecessors finish </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>F</parametername>
</parameternamelist>
<parameterdescription>
<para>callable type </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>I</parametername>
</parameternamelist>
<parameterdescription>
<para>iterator type</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>func</parametername>
</parameternamelist>
<parameterdescription>
<para>callable object </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>first</parametername>
</parameternamelist>
<parameterdescription>
<para>iterator to the beginning (inclusive) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>last</parametername>
</parameternamelist>
<parameterdescription>
<para>iterator to the end (exclusive)</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>a <ref refid="classtf_1_1AsyncTask" kindref="compound">tf::AsyncTask</ref> handle</para>
</simplesect>
This member function is more efficient than <ref refid="classtf_1_1Executor_1aee02b63d3a91ad5ca5a1c0e71f3e128f" kindref="member">tf::Executor::dependent_async</ref> and is encouraged to use when you do not want a <ulink url="https://en.cppreference.com/w/cpp/thread/future">std::future</ulink> to acquire the result or synchronize the execution. The example below creates three asynchronous tasks, <computeroutput>A</computeroutput>, <computeroutput>B</computeroutput>, and <computeroutput>C</computeroutput>, in which task <computeroutput>C</computeroutput> runs after task <computeroutput>A</computeroutput> and task <computeroutput>B</computeroutput>.</para>
<para><programlisting filename=".cpp"><codeline><highlight class="normal"><ref refid="cpp/container/array" kindref="compound" external="/home/thuang295/Code/taskflow/doxygen/cppreference-doxygen-web.tag.xml">std::array&lt;tf::AsyncTask, 2&gt;</ref><sp/>array<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>executor.silent_dependent_async([](){<sp/><ref refid="cpp/io/c/fprintf" kindref="compound" external="/home/thuang295/Code/taskflow/doxygen/cppreference-doxygen-web.tag.xml">printf</ref>(</highlight><highlight class="stringliteral">&quot;A\n&quot;</highlight><highlight class="normal">);<sp/>}),</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>executor.silent_dependent_async([](){<sp/><ref refid="cpp/io/c/fprintf" kindref="compound" external="/home/thuang295/Code/taskflow/doxygen/cppreference-doxygen-web.tag.xml">printf</ref>(</highlight><highlight class="stringliteral">&quot;B\n&quot;</highlight><highlight class="normal">);<sp/>})</highlight></codeline>
<codeline><highlight class="normal">};</highlight></codeline>
<codeline><highlight class="normal">executor.silent_dependent_async(</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>[](){<sp/><ref refid="cpp/io/c/fprintf" kindref="compound" external="/home/thuang295/Code/taskflow/doxygen/cppreference-doxygen-web.tag.xml">printf</ref>(</highlight><highlight class="stringliteral">&quot;C<sp/>runs<sp/>after<sp/>A<sp/>and<sp/>B\n&quot;</highlight><highlight class="normal">);<sp/>},<sp/>array.begin(),<sp/>array.end()</highlight></codeline>
<codeline><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">executor.wait_for_all();</highlight></codeline>
</programlisting></para>
<para>This member function is thread-safe. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="taskflow/core/executor.hpp" line="841" column="17"/>
      </memberdef>
      <memberdef kind="function" id="classtf_1_1Executor_1afdfb0ef6f995288299f7fe7e53c0cf3b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename P</type>
          </param>
          <param>
            <type>typename F</type>
          </param>
          <param>
            <type>typename I</type>
          </param>
          <param>
            <type>std::enable_if_t&lt; <ref refid="namespacetf_1ad3a41adc2499a9519da3e77dc3e9849c" kindref="member">is_task_params_v</ref>&lt; P &gt; &amp;&amp;!std::is_same_v&lt; std::decay_t&lt; I &gt;, <ref refid="classtf_1_1AsyncTask" kindref="compound">AsyncTask</ref> &gt;, void &gt; *</type>
            <defval>nullptr</defval>
          </param>
        </templateparamlist>
        <type><ref refid="classtf_1_1AsyncTask" kindref="compound">tf::AsyncTask</ref></type>
        <definition>tf::AsyncTask tf::Executor::silent_dependent_async</definition>
        <argsstring>(P &amp;&amp;params, F &amp;&amp;func, I first, I last)</argsstring>
        <name>silent_dependent_async</name>
        <param>
          <type>P &amp;&amp;</type>
          <declname>params</declname>
        </param>
        <param>
          <type>F &amp;&amp;</type>
          <declname>func</declname>
        </param>
        <param>
          <type>I</type>
          <declname>first</declname>
        </param>
        <param>
          <type>I</type>
          <declname>last</declname>
        </param>
        <briefdescription>
<para>runs the given function asynchronously when the given range of predecessors finish </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>F</parametername>
</parameternamelist>
<parameterdescription>
<para>callable type </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>I</parametername>
</parameternamelist>
<parameterdescription>
<para>iterator type</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>params</parametername>
</parameternamelist>
<parameterdescription>
<para>tasks parameters </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>func</parametername>
</parameternamelist>
<parameterdescription>
<para>callable object </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>first</parametername>
</parameternamelist>
<parameterdescription>
<para>iterator to the beginning (inclusive) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>last</parametername>
</parameternamelist>
<parameterdescription>
<para>iterator to the end (exclusive)</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>a <ref refid="classtf_1_1AsyncTask" kindref="compound">tf::AsyncTask</ref> handle</para>
</simplesect>
This member function is more efficient than <ref refid="classtf_1_1Executor_1aee02b63d3a91ad5ca5a1c0e71f3e128f" kindref="member">tf::Executor::dependent_async</ref> and is encouraged to use when you do not want a <ulink url="https://en.cppreference.com/w/cpp/thread/future">std::future</ulink> to acquire the result or synchronize the execution. The example below creates three asynchronous tasks, <computeroutput>A</computeroutput>, <computeroutput>B</computeroutput>, and <computeroutput>C</computeroutput>, in which task <computeroutput>C</computeroutput> runs after task <computeroutput>A</computeroutput> and task <computeroutput>B</computeroutput>. Assigned task names will appear in the observers of the executor.</para>
<para><programlisting filename=".cpp"><codeline><highlight class="normal"><ref refid="cpp/container/array" kindref="compound" external="/home/thuang295/Code/taskflow/doxygen/cppreference-doxygen-web.tag.xml">std::array&lt;tf::AsyncTask, 2&gt;</ref><sp/>array<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>executor.silent_dependent_async(</highlight><highlight class="stringliteral">&quot;A&quot;</highlight><highlight class="normal">,<sp/>[](){<sp/><ref refid="cpp/io/c/fprintf" kindref="compound" external="/home/thuang295/Code/taskflow/doxygen/cppreference-doxygen-web.tag.xml">printf</ref>(</highlight><highlight class="stringliteral">&quot;A\n&quot;</highlight><highlight class="normal">);<sp/>}),</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>executor.silent_dependent_async(</highlight><highlight class="stringliteral">&quot;B&quot;</highlight><highlight class="normal">,<sp/>[](){<sp/><ref refid="cpp/io/c/fprintf" kindref="compound" external="/home/thuang295/Code/taskflow/doxygen/cppreference-doxygen-web.tag.xml">printf</ref>(</highlight><highlight class="stringliteral">&quot;B\n&quot;</highlight><highlight class="normal">);<sp/>})</highlight></codeline>
<codeline><highlight class="normal">};</highlight></codeline>
<codeline><highlight class="normal">executor.silent_dependent_async(</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="stringliteral">&quot;C&quot;</highlight><highlight class="normal">,<sp/>[](){<sp/><ref refid="cpp/io/c/fprintf" kindref="compound" external="/home/thuang295/Code/taskflow/doxygen/cppreference-doxygen-web.tag.xml">printf</ref>(</highlight><highlight class="stringliteral">&quot;C<sp/>runs<sp/>after<sp/>A<sp/>and<sp/>B\n&quot;</highlight><highlight class="normal">);<sp/>},<sp/>array.begin(),<sp/>array.end()</highlight></codeline>
<codeline><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">executor.wait_for_all();</highlight></codeline>
</programlisting></para>
<para>This member function is thread-safe. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="taskflow/core/executor.hpp" line="880" column="17"/>
      </memberdef>
      <memberdef kind="function" id="classtf_1_1Executor_1aee02b63d3a91ad5ca5a1c0e71f3e128f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename F</type>
          </param>
          <param>
            <type>typename...</type>
            <declname>Tasks</declname>
            <defname>Tasks</defname>
          </param>
          <param>
            <type>std::enable_if_t&lt; all_same_v&lt; <ref refid="classtf_1_1AsyncTask" kindref="compound">AsyncTask</ref>, std::decay_t&lt; Tasks &gt;... &gt;, void &gt; *</type>
            <defval>nullptr</defval>
          </param>
        </templateparamlist>
        <type>auto</type>
        <definition>auto tf::Executor::dependent_async</definition>
        <argsstring>(F &amp;&amp;func, Tasks &amp;&amp;... tasks)</argsstring>
        <name>dependent_async</name>
        <param>
          <type>F &amp;&amp;</type>
          <declname>func</declname>
        </param>
        <param>
          <type>Tasks &amp;&amp;...</type>
          <declname>tasks</declname>
        </param>
        <briefdescription>
<para>runs the given function asynchronously when the given predecessors finish </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>F</parametername>
</parameternamelist>
<parameterdescription>
<para>callable type </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>Tasks</parametername>
</parameternamelist>
<parameterdescription>
<para>task types convertible to <ref refid="classtf_1_1AsyncTask" kindref="compound">tf::AsyncTask</ref></para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>func</parametername>
</parameternamelist>
<parameterdescription>
<para>callable object </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>tasks</parametername>
</parameternamelist>
<parameterdescription>
<para>asynchronous tasks on which this execution depends</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>a pair of a <ref refid="classtf_1_1AsyncTask" kindref="compound">tf::AsyncTask</ref> handle and a <ulink url="https://en.cppreference.com/w/cpp/thread/future">std::future</ulink> that holds the result of the execution</para>
</simplesect>
The example below creates three asynchronous tasks, <computeroutput>A</computeroutput>, <computeroutput>B</computeroutput>, and <computeroutput>C</computeroutput>, in which task <computeroutput>C</computeroutput> runs after task <computeroutput>A</computeroutput> and task <computeroutput>B</computeroutput>. <ref refid="classtf_1_1Task" kindref="compound">Task</ref> <computeroutput>C</computeroutput> returns a pair of its <ref refid="classtf_1_1AsyncTask" kindref="compound">tf::AsyncTask</ref> handle and a std::future&lt;int&gt; that eventually will hold the result of the execution.</para>
<para><programlisting filename=".cpp"><codeline><highlight class="normal"><ref refid="classtf_1_1AsyncTask" kindref="compound">tf::AsyncTask</ref><sp/>A<sp/>=<sp/>executor.silent_dependent_async([](){<sp/><ref refid="cpp/io/c/fprintf" kindref="compound" external="/home/thuang295/Code/taskflow/doxygen/cppreference-doxygen-web.tag.xml">printf</ref>(</highlight><highlight class="stringliteral">&quot;A\n&quot;</highlight><highlight class="normal">);<sp/>});</highlight></codeline>
<codeline><highlight class="normal"><ref refid="classtf_1_1AsyncTask" kindref="compound">tf::AsyncTask</ref><sp/>B<sp/>=<sp/>executor.silent_dependent_async([](){<sp/><ref refid="cpp/io/c/fprintf" kindref="compound" external="/home/thuang295/Code/taskflow/doxygen/cppreference-doxygen-web.tag.xml">printf</ref>(</highlight><highlight class="stringliteral">&quot;B\n&quot;</highlight><highlight class="normal">);<sp/>});</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>[C,<sp/>fuC]<sp/>=<sp/>executor.dependent_async(</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>[](){<sp/></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="cpp/io/c/fprintf" kindref="compound" external="/home/thuang295/Code/taskflow/doxygen/cppreference-doxygen-web.tag.xml">printf</ref>(</highlight><highlight class="stringliteral">&quot;C<sp/>runs<sp/>after<sp/>A<sp/>and<sp/>B\n&quot;</highlight><highlight class="normal">);<sp/></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>1;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>},<sp/></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>A,<sp/>B</highlight></codeline>
<codeline><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">fuC.get();<sp/><sp/></highlight><highlight class="comment">//<sp/>C<sp/>finishes,<sp/>which<sp/>in<sp/>turns<sp/>means<sp/>both<sp/>A<sp/>and<sp/>B<sp/>finish</highlight></codeline>
</programlisting></para>
<para>You can mix the use of <ref refid="classtf_1_1AsyncTask" kindref="compound">tf::AsyncTask</ref> handles returned by <ref refid="classtf_1_1Executor_1aee02b63d3a91ad5ca5a1c0e71f3e128f" kindref="member">tf::Executor::dependent_async</ref> and <ref refid="classtf_1_1Executor_1a0e2d792f28136b8227b413d0c27d5c7f" kindref="member">tf::Executor::silent_dependent_async</ref> when specifying task dependencies.</para>
<para>This member function is thread-safe. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="taskflow/core/executor.hpp" line="926" column="8"/>
      </memberdef>
      <memberdef kind="function" id="classtf_1_1Executor_1a4428cc5d1102ecb0eb51e0b977e08857" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename P</type>
          </param>
          <param>
            <type>typename F</type>
          </param>
          <param>
            <type>typename...</type>
            <declname>Tasks</declname>
            <defname>Tasks</defname>
          </param>
          <param>
            <type>std::enable_if_t&lt; <ref refid="namespacetf_1ad3a41adc2499a9519da3e77dc3e9849c" kindref="member">is_task_params_v</ref>&lt; P &gt; &amp;&amp;all_same_v&lt; <ref refid="classtf_1_1AsyncTask" kindref="compound">AsyncTask</ref>, std::decay_t&lt; Tasks &gt;... &gt;, void &gt; *</type>
            <defval>nullptr</defval>
          </param>
        </templateparamlist>
        <type>auto</type>
        <definition>auto tf::Executor::dependent_async</definition>
        <argsstring>(P &amp;&amp;params, F &amp;&amp;func, Tasks &amp;&amp;... tasks)</argsstring>
        <name>dependent_async</name>
        <param>
          <type>P &amp;&amp;</type>
          <declname>params</declname>
        </param>
        <param>
          <type>F &amp;&amp;</type>
          <declname>func</declname>
        </param>
        <param>
          <type>Tasks &amp;&amp;...</type>
          <declname>tasks</declname>
        </param>
        <briefdescription>
<para>runs the given function asynchronously when the given predecessors finish </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>P</parametername>
</parameternamelist>
<parameterdescription>
<para>task parameters type </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>F</parametername>
</parameternamelist>
<parameterdescription>
<para>callable type </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>Tasks</parametername>
</parameternamelist>
<parameterdescription>
<para>task types convertible to <ref refid="classtf_1_1AsyncTask" kindref="compound">tf::AsyncTask</ref></para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>params</parametername>
</parameternamelist>
<parameterdescription>
<para>task parameters </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>func</parametername>
</parameternamelist>
<parameterdescription>
<para>callable object </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>tasks</parametername>
</parameternamelist>
<parameterdescription>
<para>asynchronous tasks on which this execution depends</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>a pair of a <ref refid="classtf_1_1AsyncTask" kindref="compound">tf::AsyncTask</ref> handle and a <ulink url="https://en.cppreference.com/w/cpp/thread/future">std::future</ulink> that holds the result of the execution</para>
</simplesect>
The example below creates three named asynchronous tasks, <computeroutput>A</computeroutput>, <computeroutput>B</computeroutput>, and <computeroutput>C</computeroutput>, in which task <computeroutput>C</computeroutput> runs after task <computeroutput>A</computeroutput> and task <computeroutput>B</computeroutput>. <ref refid="classtf_1_1Task" kindref="compound">Task</ref> <computeroutput>C</computeroutput> returns a pair of its <ref refid="classtf_1_1AsyncTask" kindref="compound">tf::AsyncTask</ref> handle and a std::future&lt;int&gt; that eventually will hold the result of the execution. Assigned task names will appear in the observers of the executor.</para>
<para><programlisting filename=".cpp"><codeline><highlight class="normal"><ref refid="classtf_1_1AsyncTask" kindref="compound">tf::AsyncTask</ref><sp/>A<sp/>=<sp/>executor.silent_dependent_async(</highlight><highlight class="stringliteral">&quot;A&quot;</highlight><highlight class="normal">,<sp/>[](){<sp/><ref refid="cpp/io/c/fprintf" kindref="compound" external="/home/thuang295/Code/taskflow/doxygen/cppreference-doxygen-web.tag.xml">printf</ref>(</highlight><highlight class="stringliteral">&quot;A\n&quot;</highlight><highlight class="normal">);<sp/>});</highlight></codeline>
<codeline><highlight class="normal"><ref refid="classtf_1_1AsyncTask" kindref="compound">tf::AsyncTask</ref><sp/>B<sp/>=<sp/>executor.silent_dependent_async(</highlight><highlight class="stringliteral">&quot;B&quot;</highlight><highlight class="normal">,<sp/>[](){<sp/><ref refid="cpp/io/c/fprintf" kindref="compound" external="/home/thuang295/Code/taskflow/doxygen/cppreference-doxygen-web.tag.xml">printf</ref>(</highlight><highlight class="stringliteral">&quot;B\n&quot;</highlight><highlight class="normal">);<sp/>});</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>[C,<sp/>fuC]<sp/>=<sp/>executor.dependent_async(</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="stringliteral">&quot;C&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>[](){<sp/></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="cpp/io/c/fprintf" kindref="compound" external="/home/thuang295/Code/taskflow/doxygen/cppreference-doxygen-web.tag.xml">printf</ref>(</highlight><highlight class="stringliteral">&quot;C<sp/>runs<sp/>after<sp/>A<sp/>and<sp/>B\n&quot;</highlight><highlight class="normal">);<sp/></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>1;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>},<sp/></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>A,<sp/>B</highlight></codeline>
<codeline><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">assert(fuC.get()==1);<sp/><sp/></highlight><highlight class="comment">//<sp/>C<sp/>finishes,<sp/>which<sp/>in<sp/>turns<sp/>means<sp/>both<sp/>A<sp/>and<sp/>B<sp/>finish</highlight></codeline>
</programlisting></para>
<para>You can mix the use of <ref refid="classtf_1_1AsyncTask" kindref="compound">tf::AsyncTask</ref> handles returned by <ref refid="classtf_1_1Executor_1aee02b63d3a91ad5ca5a1c0e71f3e128f" kindref="member">tf::Executor::dependent_async</ref> and <ref refid="classtf_1_1Executor_1a0e2d792f28136b8227b413d0c27d5c7f" kindref="member">tf::Executor::silent_dependent_async</ref> when specifying task dependencies.</para>
<para>This member function is thread-safe. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="taskflow/core/executor.hpp" line="972" column="8"/>
      </memberdef>
      <memberdef kind="function" id="classtf_1_1Executor_1a01e51e564f5def845506bcf6b4bb1664" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename F</type>
          </param>
          <param>
            <type>typename I</type>
          </param>
          <param>
            <type>std::enable_if_t&lt;!std::is_same_v&lt; std::decay_t&lt; I &gt;, <ref refid="classtf_1_1AsyncTask" kindref="compound">AsyncTask</ref> &gt;, void &gt; *</type>
            <defval>nullptr</defval>
          </param>
        </templateparamlist>
        <type>auto</type>
        <definition>auto tf::Executor::dependent_async</definition>
        <argsstring>(F &amp;&amp;func, I first, I last)</argsstring>
        <name>dependent_async</name>
        <param>
          <type>F &amp;&amp;</type>
          <declname>func</declname>
        </param>
        <param>
          <type>I</type>
          <declname>first</declname>
        </param>
        <param>
          <type>I</type>
          <declname>last</declname>
        </param>
        <briefdescription>
<para>runs the given function asynchronously when the given range of predecessors finish </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>F</parametername>
</parameternamelist>
<parameterdescription>
<para>callable type </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>I</parametername>
</parameternamelist>
<parameterdescription>
<para>iterator type</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>func</parametername>
</parameternamelist>
<parameterdescription>
<para>callable object </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>first</parametername>
</parameternamelist>
<parameterdescription>
<para>iterator to the beginning (inclusive) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>last</parametername>
</parameternamelist>
<parameterdescription>
<para>iterator to the end (exclusive)</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>a pair of a <ref refid="classtf_1_1AsyncTask" kindref="compound">tf::AsyncTask</ref> handle and a <ulink url="https://en.cppreference.com/w/cpp/thread/future">std::future</ulink> that holds the result of the execution</para>
</simplesect>
The example below creates three asynchronous tasks, <computeroutput>A</computeroutput>, <computeroutput>B</computeroutput>, and <computeroutput>C</computeroutput>, in which task <computeroutput>C</computeroutput> runs after task <computeroutput>A</computeroutput> and task <computeroutput>B</computeroutput>. <ref refid="classtf_1_1Task" kindref="compound">Task</ref> <computeroutput>C</computeroutput> returns a pair of its <ref refid="classtf_1_1AsyncTask" kindref="compound">tf::AsyncTask</ref> handle and a std::future&lt;int&gt; that eventually will hold the result of the execution.</para>
<para><programlisting filename=".cpp"><codeline><highlight class="normal"><ref refid="cpp/container/array" kindref="compound" external="/home/thuang295/Code/taskflow/doxygen/cppreference-doxygen-web.tag.xml">std::array&lt;tf::AsyncTask, 2&gt;</ref><sp/>array<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>executor.silent_dependent_async([](){<sp/><ref refid="cpp/io/c/fprintf" kindref="compound" external="/home/thuang295/Code/taskflow/doxygen/cppreference-doxygen-web.tag.xml">printf</ref>(</highlight><highlight class="stringliteral">&quot;A\n&quot;</highlight><highlight class="normal">);<sp/>}),</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>executor.silent_dependent_async([](){<sp/><ref refid="cpp/io/c/fprintf" kindref="compound" external="/home/thuang295/Code/taskflow/doxygen/cppreference-doxygen-web.tag.xml">printf</ref>(</highlight><highlight class="stringliteral">&quot;B\n&quot;</highlight><highlight class="normal">);<sp/>})</highlight></codeline>
<codeline><highlight class="normal">};</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>[C,<sp/>fuC]<sp/>=<sp/>executor.dependent_async(</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>[](){<sp/></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="cpp/io/c/fprintf" kindref="compound" external="/home/thuang295/Code/taskflow/doxygen/cppreference-doxygen-web.tag.xml">printf</ref>(</highlight><highlight class="stringliteral">&quot;C<sp/>runs<sp/>after<sp/>A<sp/>and<sp/>B\n&quot;</highlight><highlight class="normal">);<sp/></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>1;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>},<sp/></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>array.begin(),<sp/>array.end()</highlight></codeline>
<codeline><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">assert(fuC.get()==1);<sp/><sp/></highlight><highlight class="comment">//<sp/>C<sp/>finishes,<sp/>which<sp/>in<sp/>turns<sp/>means<sp/>both<sp/>A<sp/>and<sp/>B<sp/>finish</highlight></codeline>
</programlisting></para>
<para>You can mix the use of <ref refid="classtf_1_1AsyncTask" kindref="compound">tf::AsyncTask</ref> handles returned by <ref refid="classtf_1_1Executor_1aee02b63d3a91ad5ca5a1c0e71f3e128f" kindref="member">tf::Executor::dependent_async</ref> and <ref refid="classtf_1_1Executor_1a0e2d792f28136b8227b413d0c27d5c7f" kindref="member">tf::Executor::silent_dependent_async</ref> when specifying task dependencies.</para>
<para>This member function is thread-safe. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="taskflow/core/executor.hpp" line="1017" column="8"/>
      </memberdef>
      <memberdef kind="function" id="classtf_1_1Executor_1a962d7fb7213a804ee4a2e7b79455efdc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename P</type>
          </param>
          <param>
            <type>typename F</type>
          </param>
          <param>
            <type>typename I</type>
          </param>
          <param>
            <type>std::enable_if_t&lt; <ref refid="namespacetf_1ad3a41adc2499a9519da3e77dc3e9849c" kindref="member">is_task_params_v</ref>&lt; P &gt; &amp;&amp;!std::is_same_v&lt; std::decay_t&lt; I &gt;, <ref refid="classtf_1_1AsyncTask" kindref="compound">AsyncTask</ref> &gt;, void &gt; *</type>
            <defval>nullptr</defval>
          </param>
        </templateparamlist>
        <type>auto</type>
        <definition>auto tf::Executor::dependent_async</definition>
        <argsstring>(P &amp;&amp;params, F &amp;&amp;func, I first, I last)</argsstring>
        <name>dependent_async</name>
        <param>
          <type>P &amp;&amp;</type>
          <declname>params</declname>
        </param>
        <param>
          <type>F &amp;&amp;</type>
          <declname>func</declname>
        </param>
        <param>
          <type>I</type>
          <declname>first</declname>
        </param>
        <param>
          <type>I</type>
          <declname>last</declname>
        </param>
        <briefdescription>
<para>runs the given function asynchronously when the given range of predecessors finish </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>P</parametername>
</parameternamelist>
<parameterdescription>
<para>task parameters type </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>F</parametername>
</parameternamelist>
<parameterdescription>
<para>callable type </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>I</parametername>
</parameternamelist>
<parameterdescription>
<para>iterator type</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>params</parametername>
</parameternamelist>
<parameterdescription>
<para>task parameters </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>func</parametername>
</parameternamelist>
<parameterdescription>
<para>callable object </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>first</parametername>
</parameternamelist>
<parameterdescription>
<para>iterator to the beginning (inclusive) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>last</parametername>
</parameternamelist>
<parameterdescription>
<para>iterator to the end (exclusive)</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>a pair of a <ref refid="classtf_1_1AsyncTask" kindref="compound">tf::AsyncTask</ref> handle and a <ulink url="https://en.cppreference.com/w/cpp/thread/future">std::future</ulink> that holds the result of the execution</para>
</simplesect>
The example below creates three named asynchronous tasks, <computeroutput>A</computeroutput>, <computeroutput>B</computeroutput>, and <computeroutput>C</computeroutput>, in which task <computeroutput>C</computeroutput> runs after task <computeroutput>A</computeroutput> and task <computeroutput>B</computeroutput>. <ref refid="classtf_1_1Task" kindref="compound">Task</ref> <computeroutput>C</computeroutput> returns a pair of its <ref refid="classtf_1_1AsyncTask" kindref="compound">tf::AsyncTask</ref> handle and a std::future&lt;int&gt; that eventually will hold the result of the execution. Assigned task names will appear in the observers of the executor.</para>
<para><programlisting filename=".cpp"><codeline><highlight class="normal"><ref refid="cpp/container/array" kindref="compound" external="/home/thuang295/Code/taskflow/doxygen/cppreference-doxygen-web.tag.xml">std::array&lt;tf::AsyncTask, 2&gt;</ref><sp/>array<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>executor.silent_dependent_async(</highlight><highlight class="stringliteral">&quot;A&quot;</highlight><highlight class="normal">,<sp/>[](){<sp/><ref refid="cpp/io/c/fprintf" kindref="compound" external="/home/thuang295/Code/taskflow/doxygen/cppreference-doxygen-web.tag.xml">printf</ref>(</highlight><highlight class="stringliteral">&quot;A\n&quot;</highlight><highlight class="normal">);<sp/>}),</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>executor.silent_dependent_async(</highlight><highlight class="stringliteral">&quot;B&quot;</highlight><highlight class="normal">,<sp/>[](){<sp/><ref refid="cpp/io/c/fprintf" kindref="compound" external="/home/thuang295/Code/taskflow/doxygen/cppreference-doxygen-web.tag.xml">printf</ref>(</highlight><highlight class="stringliteral">&quot;B\n&quot;</highlight><highlight class="normal">);<sp/>})</highlight></codeline>
<codeline><highlight class="normal">};</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>[C,<sp/>fuC]<sp/>=<sp/>executor.dependent_async(</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="stringliteral">&quot;C&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>[](){<sp/></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="cpp/io/c/fprintf" kindref="compound" external="/home/thuang295/Code/taskflow/doxygen/cppreference-doxygen-web.tag.xml">printf</ref>(</highlight><highlight class="stringliteral">&quot;C<sp/>runs<sp/>after<sp/>A<sp/>and<sp/>B\n&quot;</highlight><highlight class="normal">);<sp/></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>1;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>},<sp/></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>array.begin(),<sp/>array.end()</highlight></codeline>
<codeline><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">assert(fuC.get()==1);<sp/><sp/></highlight><highlight class="comment">//<sp/>C<sp/>finishes,<sp/>which<sp/>in<sp/>turns<sp/>means<sp/>both<sp/>A<sp/>and<sp/>B<sp/>finish</highlight></codeline>
</programlisting></para>
<para>You can mix the use of <ref refid="classtf_1_1AsyncTask" kindref="compound">tf::AsyncTask</ref> handles returned by <ref refid="classtf_1_1Executor_1aee02b63d3a91ad5ca5a1c0e71f3e128f" kindref="member">tf::Executor::dependent_async</ref> and <ref refid="classtf_1_1Executor_1a0e2d792f28136b8227b413d0c27d5c7f" kindref="member">tf::Executor::silent_dependent_async</ref> when specifying task dependencies.</para>
<para>This member function is thread-safe. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="taskflow/core/executor.hpp" line="1066" column="8"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-func">
      <memberdef kind="function" id="classtf_1_1Executor_1a918b9de1ca1e20e35bf0d3b610dfa803" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void tf::Executor::_shutdown</definition>
        <argsstring>()</argsstring>
        <name>_shutdown</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="taskflow/core/executor.hpp" line="1085" column="8"/>
      </memberdef>
      <memberdef kind="function" id="classtf_1_1Executor_1ae023614977a19def9e04cf7212eab65b" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void tf::Executor::_observer_prologue</definition>
        <argsstring>(Worker &amp;, Node *)</argsstring>
        <name>_observer_prologue</name>
        <param>
          <type><ref refid="classtf_1_1Worker" kindref="compound">Worker</ref> &amp;</type>
        </param>
        <param>
          <type>Node *</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="taskflow/core/executor.hpp" line="1086" column="8"/>
      </memberdef>
      <memberdef kind="function" id="classtf_1_1Executor_1a9cd8c1a72af4477bc0f9575b68ffb16a" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void tf::Executor::_observer_epilogue</definition>
        <argsstring>(Worker &amp;, Node *)</argsstring>
        <name>_observer_epilogue</name>
        <param>
          <type><ref refid="classtf_1_1Worker" kindref="compound">Worker</ref> &amp;</type>
        </param>
        <param>
          <type>Node *</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="taskflow/core/executor.hpp" line="1087" column="8"/>
      </memberdef>
      <memberdef kind="function" id="classtf_1_1Executor_1a8aee6c0ec55b4bfb3909601203e98514" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void tf::Executor::_spawn</definition>
        <argsstring>(size_t)</argsstring>
        <name>_spawn</name>
        <param>
          <type>size_t</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="taskflow/core/executor.hpp" line="1088" column="8"/>
      </memberdef>
      <memberdef kind="function" id="classtf_1_1Executor_1a0b4f231e11016194980b14e76262c8a7" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void tf::Executor::_exploit_task</definition>
        <argsstring>(Worker &amp;, Node *&amp;)</argsstring>
        <name>_exploit_task</name>
        <param>
          <type><ref refid="classtf_1_1Worker" kindref="compound">Worker</ref> &amp;</type>
        </param>
        <param>
          <type>Node *&amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="taskflow/core/executor.hpp" line="1089" column="8"/>
      </memberdef>
      <memberdef kind="function" id="classtf_1_1Executor_1ac5827e67b2b60c16259b45e14c6e97e0" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool tf::Executor::_explore_task</definition>
        <argsstring>(Worker &amp;, Node *&amp;)</argsstring>
        <name>_explore_task</name>
        <param>
          <type><ref refid="classtf_1_1Worker" kindref="compound">Worker</ref> &amp;</type>
        </param>
        <param>
          <type>Node *&amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="taskflow/core/executor.hpp" line="1090" column="8"/>
      </memberdef>
      <memberdef kind="function" id="classtf_1_1Executor_1ab8d98f12a62d10ad6cf1a4011a4d0034" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void tf::Executor::_schedule</definition>
        <argsstring>(Worker &amp;, Node *)</argsstring>
        <name>_schedule</name>
        <param>
          <type><ref refid="classtf_1_1Worker" kindref="compound">Worker</ref> &amp;</type>
        </param>
        <param>
          <type>Node *</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="taskflow/core/executor.hpp" line="1091" column="8"/>
      </memberdef>
      <memberdef kind="function" id="classtf_1_1Executor_1a685c08b62a494359e34c6de2a700fdab" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void tf::Executor::_schedule</definition>
        <argsstring>(Node *)</argsstring>
        <name>_schedule</name>
        <param>
          <type>Node *</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="taskflow/core/executor.hpp" line="1092" column="8"/>
      </memberdef>
      <memberdef kind="function" id="classtf_1_1Executor_1a723daf897c5d3d3517583cb4c62654ee" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void tf::Executor::_set_up_topology</definition>
        <argsstring>(Worker *, Topology *)</argsstring>
        <name>_set_up_topology</name>
        <param>
          <type><ref refid="classtf_1_1Worker" kindref="compound">Worker</ref> *</type>
        </param>
        <param>
          <type>Topology *</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="taskflow/core/executor.hpp" line="1093" column="8"/>
      </memberdef>
      <memberdef kind="function" id="classtf_1_1Executor_1a76be884d38d1bb8f9b8bba488c901b4b" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void tf::Executor::_tear_down_topology</definition>
        <argsstring>(Worker &amp;, Topology *)</argsstring>
        <name>_tear_down_topology</name>
        <param>
          <type><ref refid="classtf_1_1Worker" kindref="compound">Worker</ref> &amp;</type>
        </param>
        <param>
          <type>Topology *</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="taskflow/core/executor.hpp" line="1094" column="8"/>
      </memberdef>
      <memberdef kind="function" id="classtf_1_1Executor_1a79f99f43c3c92b435b07aa8dad58a705" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void tf::Executor::_tear_down_async</definition>
        <argsstring>(Worker &amp;, Node *, Node *&amp;)</argsstring>
        <name>_tear_down_async</name>
        <param>
          <type><ref refid="classtf_1_1Worker" kindref="compound">Worker</ref> &amp;</type>
        </param>
        <param>
          <type>Node *</type>
        </param>
        <param>
          <type>Node *&amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="taskflow/core/executor.hpp" line="1095" column="8"/>
      </memberdef>
      <memberdef kind="function" id="classtf_1_1Executor_1ac45426ad824479abf50a235ce694cbed" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void tf::Executor::_tear_down_dependent_async</definition>
        <argsstring>(Worker &amp;, Node *, Node *&amp;)</argsstring>
        <name>_tear_down_dependent_async</name>
        <param>
          <type><ref refid="classtf_1_1Worker" kindref="compound">Worker</ref> &amp;</type>
        </param>
        <param>
          <type>Node *</type>
        </param>
        <param>
          <type>Node *&amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="taskflow/core/executor.hpp" line="1096" column="8"/>
      </memberdef>
      <memberdef kind="function" id="classtf_1_1Executor_1a1acd8ab422ebef8ea91ea0f51b80352f" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void tf::Executor::_tear_down_nonasync</definition>
        <argsstring>(Worker &amp;, Node *, Node *&amp;)</argsstring>
        <name>_tear_down_nonasync</name>
        <param>
          <type><ref refid="classtf_1_1Worker" kindref="compound">Worker</ref> &amp;</type>
        </param>
        <param>
          <type>Node *</type>
        </param>
        <param>
          <type>Node *&amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="taskflow/core/executor.hpp" line="1097" column="8"/>
      </memberdef>
      <memberdef kind="function" id="classtf_1_1Executor_1a1b5d5e8b7093379e3ff9108c21beb462" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void tf::Executor::_tear_down_invoke</definition>
        <argsstring>(Worker &amp;, Node *, Node *&amp;)</argsstring>
        <name>_tear_down_invoke</name>
        <param>
          <type><ref refid="classtf_1_1Worker" kindref="compound">Worker</ref> &amp;</type>
        </param>
        <param>
          <type>Node *</type>
        </param>
        <param>
          <type>Node *&amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="taskflow/core/executor.hpp" line="1098" column="8"/>
      </memberdef>
      <memberdef kind="function" id="classtf_1_1Executor_1ab85dc42b3e9b18e4b975bd5e9a8c5e72" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void tf::Executor::_increment_topology</definition>
        <argsstring>()</argsstring>
        <name>_increment_topology</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="taskflow/core/executor.hpp" line="1099" column="8"/>
      </memberdef>
      <memberdef kind="function" id="classtf_1_1Executor_1a8728f22f6d177fad84ce667e02a7a3b9" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void tf::Executor::_decrement_topology</definition>
        <argsstring>()</argsstring>
        <name>_decrement_topology</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="taskflow/core/executor.hpp" line="1100" column="8"/>
      </memberdef>
      <memberdef kind="function" id="classtf_1_1Executor_1ad16165142908aca9444ea88e65040219" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void tf::Executor::_invoke</definition>
        <argsstring>(Worker &amp;, Node *)</argsstring>
        <name>_invoke</name>
        <param>
          <type><ref refid="classtf_1_1Worker" kindref="compound">Worker</ref> &amp;</type>
        </param>
        <param>
          <type>Node *</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="taskflow/core/executor.hpp" line="1101" column="8"/>
      </memberdef>
      <memberdef kind="function" id="classtf_1_1Executor_1ac243d2a08b5a4a75dd440dc063b886ce" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void tf::Executor::_invoke_static_task</definition>
        <argsstring>(Worker &amp;, Node *)</argsstring>
        <name>_invoke_static_task</name>
        <param>
          <type><ref refid="classtf_1_1Worker" kindref="compound">Worker</ref> &amp;</type>
        </param>
        <param>
          <type>Node *</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="taskflow/core/executor.hpp" line="1102" column="8"/>
      </memberdef>
      <memberdef kind="function" id="classtf_1_1Executor_1a928ed677e7694fa3679dc717fe22e763" prot="private" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void tf::Executor::_invoke_nonpreemptive_runtime_task</definition>
        <argsstring>(Worker &amp;, Node *)</argsstring>
        <name>_invoke_nonpreemptive_runtime_task</name>
        <param>
          <type><ref refid="classtf_1_1Worker" kindref="compound">Worker</ref> &amp;</type>
          <defname>worker</defname>
        </param>
        <param>
          <type>Node *</type>
          <defname>node</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="taskflow/core/executor.hpp" line="1103" column="8" bodyfile="taskflow/core/runtime.hpp" bodystart="975" bodyend="982"/>
      </memberdef>
      <memberdef kind="function" id="classtf_1_1Executor_1afa6be6aab23ff4b2a293a2245818916d" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void tf::Executor::_invoke_condition_task</definition>
        <argsstring>(Worker &amp;, Node *, SmallVector&lt; int &gt; &amp;)</argsstring>
        <name>_invoke_condition_task</name>
        <param>
          <type><ref refid="classtf_1_1Worker" kindref="compound">Worker</ref> &amp;</type>
        </param>
        <param>
          <type>Node *</type>
        </param>
        <param>
          <type><ref refid="classtf_1_1SmallVector" kindref="compound">SmallVector</ref>&lt; int &gt; &amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="taskflow/core/executor.hpp" line="1104" column="8"/>
      </memberdef>
      <memberdef kind="function" id="classtf_1_1Executor_1a19b3f10d4eab40143d3f76b946ded252" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void tf::Executor::_invoke_multi_condition_task</definition>
        <argsstring>(Worker &amp;, Node *, SmallVector&lt; int &gt; &amp;)</argsstring>
        <name>_invoke_multi_condition_task</name>
        <param>
          <type><ref refid="classtf_1_1Worker" kindref="compound">Worker</ref> &amp;</type>
        </param>
        <param>
          <type>Node *</type>
        </param>
        <param>
          <type><ref refid="classtf_1_1SmallVector" kindref="compound">SmallVector</ref>&lt; int &gt; &amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="taskflow/core/executor.hpp" line="1105" column="8"/>
      </memberdef>
      <memberdef kind="function" id="classtf_1_1Executor_1a62a4f5f02d7318fdc6cecaacb27d2673" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void tf::Executor::_process_dependent_async</definition>
        <argsstring>(Node *, tf::AsyncTask &amp;, size_t &amp;)</argsstring>
        <name>_process_dependent_async</name>
        <param>
          <type>Node *</type>
        </param>
        <param>
          <type><ref refid="classtf_1_1AsyncTask" kindref="compound">tf::AsyncTask</ref> &amp;</type>
        </param>
        <param>
          <type>size_t &amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="taskflow/core/executor.hpp" line="1106" column="8"/>
      </memberdef>
      <memberdef kind="function" id="classtf_1_1Executor_1ad3c24a3fa701517bfdf119c549e2729a" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void tf::Executor::_process_exception</definition>
        <argsstring>(Worker &amp;, Node *)</argsstring>
        <name>_process_exception</name>
        <param>
          <type><ref refid="classtf_1_1Worker" kindref="compound">Worker</ref> &amp;</type>
        </param>
        <param>
          <type>Node *</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="taskflow/core/executor.hpp" line="1107" column="8"/>
      </memberdef>
      <memberdef kind="function" id="classtf_1_1Executor_1af5acda8c6e9a1564c9d665336ea091d0" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void tf::Executor::_schedule_async_task</definition>
        <argsstring>(Node *)</argsstring>
        <name>_schedule_async_task</name>
        <param>
          <type>Node *</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="taskflow/core/executor.hpp" line="1108" column="8"/>
      </memberdef>
      <memberdef kind="function" id="classtf_1_1Executor_1a4b2c977a4a054b54c5a563c804accdf0" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void tf::Executor::_update_cache</definition>
        <argsstring>(Worker &amp;, Node *&amp;, Node *)</argsstring>
        <name>_update_cache</name>
        <param>
          <type><ref refid="classtf_1_1Worker" kindref="compound">Worker</ref> &amp;</type>
        </param>
        <param>
          <type>Node *&amp;</type>
        </param>
        <param>
          <type>Node *</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="taskflow/core/executor.hpp" line="1109" column="8"/>
      </memberdef>
      <memberdef kind="function" id="classtf_1_1Executor_1a57f5105dc812d83f259ec8cab7c96228" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool tf::Executor::_wait_for_task</definition>
        <argsstring>(Worker &amp;, Node *&amp;)</argsstring>
        <name>_wait_for_task</name>
        <param>
          <type><ref refid="classtf_1_1Worker" kindref="compound">Worker</ref> &amp;</type>
        </param>
        <param>
          <type>Node *&amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="taskflow/core/executor.hpp" line="1111" column="8"/>
      </memberdef>
      <memberdef kind="function" id="classtf_1_1Executor_1a726a11d174f98f4200e0022a17ece959" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool tf::Executor::_invoke_subflow_task</definition>
        <argsstring>(Worker &amp;, Node *)</argsstring>
        <name>_invoke_subflow_task</name>
        <param>
          <type><ref refid="classtf_1_1Worker" kindref="compound">Worker</ref> &amp;</type>
        </param>
        <param>
          <type>Node *</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="taskflow/core/executor.hpp" line="1112" column="8"/>
      </memberdef>
      <memberdef kind="function" id="classtf_1_1Executor_1a429fed7f063b23a633e1657a43f1fd0e" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool tf::Executor::_invoke_module_task</definition>
        <argsstring>(Worker &amp;, Node *)</argsstring>
        <name>_invoke_module_task</name>
        <param>
          <type><ref refid="classtf_1_1Worker" kindref="compound">Worker</ref> &amp;</type>
        </param>
        <param>
          <type>Node *</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="taskflow/core/executor.hpp" line="1113" column="8"/>
      </memberdef>
      <memberdef kind="function" id="classtf_1_1Executor_1af9e21517ed8c6a1ce2cea4cda61fb111" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool tf::Executor::_invoke_module_task_impl</definition>
        <argsstring>(Worker &amp;, Node *, Graph &amp;)</argsstring>
        <name>_invoke_module_task_impl</name>
        <param>
          <type><ref refid="classtf_1_1Worker" kindref="compound">Worker</ref> &amp;</type>
        </param>
        <param>
          <type>Node *</type>
        </param>
        <param>
          <type><ref refid="classtf_1_1Graph" kindref="compound">Graph</ref> &amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="taskflow/core/executor.hpp" line="1114" column="8"/>
      </memberdef>
      <memberdef kind="function" id="classtf_1_1Executor_1a1d1b9bf8ed24dffff65d860ef1627ef3" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool tf::Executor::_invoke_async_task</definition>
        <argsstring>(Worker &amp;, Node *)</argsstring>
        <name>_invoke_async_task</name>
        <param>
          <type><ref refid="classtf_1_1Worker" kindref="compound">Worker</ref> &amp;</type>
        </param>
        <param>
          <type>Node *</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="taskflow/core/executor.hpp" line="1115" column="8"/>
      </memberdef>
      <memberdef kind="function" id="classtf_1_1Executor_1a776d2c0b21b8811c2f83abf45e3d0d90" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool tf::Executor::_invoke_dependent_async_task</definition>
        <argsstring>(Worker &amp;, Node *)</argsstring>
        <name>_invoke_dependent_async_task</name>
        <param>
          <type><ref refid="classtf_1_1Worker" kindref="compound">Worker</ref> &amp;</type>
        </param>
        <param>
          <type>Node *</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="taskflow/core/executor.hpp" line="1116" column="8"/>
      </memberdef>
      <memberdef kind="function" id="classtf_1_1Executor_1a324dfe88e4b227fce0fdc76b667c40ce" prot="private" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool tf::Executor::_invoke_runtime_task</definition>
        <argsstring>(Worker &amp;, Node *)</argsstring>
        <name>_invoke_runtime_task</name>
        <param>
          <type><ref refid="classtf_1_1Worker" kindref="compound">Worker</ref> &amp;</type>
          <defname>worker</defname>
        </param>
        <param>
          <type>Node *</type>
          <defname>node</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="taskflow/core/executor.hpp" line="1117" column="8" bodyfile="taskflow/core/runtime.hpp" bodystart="828" bodyend="832"/>
      </memberdef>
      <memberdef kind="function" id="classtf_1_1Executor_1a7dbf235bdda813dd63e851cbae573bb4" prot="private" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool tf::Executor::_invoke_runtime_task_impl</definition>
        <argsstring>(Worker &amp;, Node *, std::function&lt; void(Runtime &amp;)&gt; &amp;)</argsstring>
        <name>_invoke_runtime_task_impl</name>
        <param>
          <type><ref refid="classtf_1_1Worker" kindref="compound">Worker</ref> &amp;</type>
          <defname>worker</defname>
        </param>
        <param>
          <type>Node *</type>
          <defname>node</defname>
        </param>
        <param>
          <type><ref refid="cpp/utility/functional/function" kindref="compound" external="/home/thuang295/Code/taskflow/doxygen/cppreference-doxygen-web.tag.xml">std::function</ref>&lt; void(<ref refid="classtf_1_1Runtime" kindref="compound">Runtime</ref> &amp;)&gt; &amp;</type>
          <defname>work</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="taskflow/core/executor.hpp" line="1118" column="8" bodyfile="taskflow/core/runtime.hpp" bodystart="835" bodyend="870"/>
      </memberdef>
      <memberdef kind="function" id="classtf_1_1Executor_1aa7ccdd2724a8782e04d8a19567912e67" prot="private" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool tf::Executor::_invoke_runtime_task_impl</definition>
        <argsstring>(Worker &amp;, Node *, std::function&lt; void(Runtime &amp;, bool)&gt; &amp;)</argsstring>
        <name>_invoke_runtime_task_impl</name>
        <param>
          <type><ref refid="classtf_1_1Worker" kindref="compound">Worker</ref> &amp;</type>
          <defname>worker</defname>
        </param>
        <param>
          <type>Node *</type>
          <defname>node</defname>
        </param>
        <param>
          <type><ref refid="cpp/utility/functional/function" kindref="compound" external="/home/thuang295/Code/taskflow/doxygen/cppreference-doxygen-web.tag.xml">std::function</ref>&lt; void(<ref refid="classtf_1_1Runtime" kindref="compound">Runtime</ref> &amp;, bool)&gt; &amp;</type>
          <defname>work</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="taskflow/core/executor.hpp" line="1119" column="8" bodyfile="taskflow/core/runtime.hpp" bodystart="873" bodyend="913"/>
      </memberdef>
      <memberdef kind="function" id="classtf_1_1Executor_1aeaa72f55f54c0f13202c3b5c0900ba6e" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename I</type>
          </param>
        </templateparamlist>
        <type>I</type>
        <definition>I tf::Executor::_set_up_graph</definition>
        <argsstring>(I, I, Topology *, Node *)</argsstring>
        <name>_set_up_graph</name>
        <param>
          <type>I</type>
        </param>
        <param>
          <type>I</type>
        </param>
        <param>
          <type>Topology *</type>
        </param>
        <param>
          <type>Node *</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="taskflow/core/executor.hpp" line="1122" column="5"/>
      </memberdef>
      <memberdef kind="function" id="classtf_1_1Executor_1a43cdd198427b7be2827450f6ce8343af" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename P</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void tf::Executor::_corun_until</definition>
        <argsstring>(Worker &amp;, P &amp;&amp;)</argsstring>
        <name>_corun_until</name>
        <param>
          <type><ref refid="classtf_1_1Worker" kindref="compound">Worker</ref> &amp;</type>
        </param>
        <param>
          <type>P &amp;&amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="taskflow/core/executor.hpp" line="1125" column="8"/>
      </memberdef>
      <memberdef kind="function" id="classtf_1_1Executor_1aec313f2f099ee2fd6cb85a164457f019" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename I</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void tf::Executor::_corun_graph</definition>
        <argsstring>(Worker &amp;, Node *, I, I)</argsstring>
        <name>_corun_graph</name>
        <param>
          <type><ref refid="classtf_1_1Worker" kindref="compound">Worker</ref> &amp;</type>
        </param>
        <param>
          <type>Node *</type>
        </param>
        <param>
          <type>I</type>
        </param>
        <param>
          <type>I</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="taskflow/core/executor.hpp" line="1128" column="8"/>
      </memberdef>
      <memberdef kind="function" id="classtf_1_1Executor_1add98fb65f206923eb43a8768e0c717c1" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename I</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void tf::Executor::_schedule</definition>
        <argsstring>(Worker &amp;, I, I)</argsstring>
        <name>_schedule</name>
        <param>
          <type><ref refid="classtf_1_1Worker" kindref="compound">Worker</ref> &amp;</type>
        </param>
        <param>
          <type>I</type>
        </param>
        <param>
          <type>I</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="taskflow/core/executor.hpp" line="1131" column="8"/>
      </memberdef>
      <memberdef kind="function" id="classtf_1_1Executor_1a604b3442bfedada0f5713c6b174a1c90" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename I</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void tf::Executor::_schedule</definition>
        <argsstring>(I, I)</argsstring>
        <name>_schedule</name>
        <param>
          <type>I</type>
        </param>
        <param>
          <type>I</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="taskflow/core/executor.hpp" line="1134" column="8"/>
      </memberdef>
      <memberdef kind="function" id="classtf_1_1Executor_1ae3d3436d6e39c5e84d32eb0b7dbeb9ca" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename I</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void tf::Executor::_schedule_graph_with_parent</definition>
        <argsstring>(Worker &amp;, I, I, Node *)</argsstring>
        <name>_schedule_graph_with_parent</name>
        <param>
          <type><ref refid="classtf_1_1Worker" kindref="compound">Worker</ref> &amp;</type>
        </param>
        <param>
          <type>I</type>
        </param>
        <param>
          <type>I</type>
        </param>
        <param>
          <type>Node *</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="taskflow/core/executor.hpp" line="1137" column="8"/>
      </memberdef>
      <memberdef kind="function" id="classtf_1_1Executor_1ac568bd686aba3bedabe63b42c43d94a8" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename P</type>
          </param>
          <param>
            <type>typename F</type>
          </param>
        </templateparamlist>
        <type>auto</type>
        <definition>auto tf::Executor::_async</definition>
        <argsstring>(P &amp;&amp;, F &amp;&amp;, Topology *, Node *)</argsstring>
        <name>_async</name>
        <param>
          <type>P &amp;&amp;</type>
        </param>
        <param>
          <type>F &amp;&amp;</type>
        </param>
        <param>
          <type>Topology *</type>
        </param>
        <param>
          <type>Node *</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="taskflow/core/executor.hpp" line="1140" column="8"/>
      </memberdef>
      <memberdef kind="function" id="classtf_1_1Executor_1aa3b32388be14b03249de29bae34b7b52" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename P</type>
          </param>
          <param>
            <type>typename F</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void tf::Executor::_silent_async</definition>
        <argsstring>(P &amp;&amp;, F &amp;&amp;, Topology *, Node *)</argsstring>
        <name>_silent_async</name>
        <param>
          <type>P &amp;&amp;</type>
        </param>
        <param>
          <type>F &amp;&amp;</type>
        </param>
        <param>
          <type>Topology *</type>
        </param>
        <param>
          <type>Node *</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="taskflow/core/executor.hpp" line="1143" column="8"/>
      </memberdef>
      <memberdef kind="function" id="classtf_1_1Executor_1a1b8e9646bfacc44442ffb99a9de17703" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename P</type>
          </param>
          <param>
            <type>typename F</type>
          </param>
          <param>
            <type>typename I</type>
          </param>
          <param>
            <type>std::enable_if_t&lt; <ref refid="namespacetf_1ad3a41adc2499a9519da3e77dc3e9849c" kindref="member">is_task_params_v</ref>&lt; P &gt; &amp;&amp;!std::is_same_v&lt; std::decay_t&lt; I &gt;, <ref refid="classtf_1_1AsyncTask" kindref="compound">AsyncTask</ref> &gt;, void &gt; *</type>
            <defval>nullptr</defval>
          </param>
        </templateparamlist>
        <type>auto</type>
        <definition>auto tf::Executor::_dependent_async</definition>
        <argsstring>(P &amp;&amp;, F &amp;&amp;, I, I, Topology *, Node *)</argsstring>
        <name>_dependent_async</name>
        <param>
          <type>P &amp;&amp;</type>
        </param>
        <param>
          <type>F &amp;&amp;</type>
        </param>
        <param>
          <type>I</type>
        </param>
        <param>
          <type>I</type>
        </param>
        <param>
          <type>Topology *</type>
        </param>
        <param>
          <type>Node *</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="taskflow/core/executor.hpp" line="1148" column="8"/>
      </memberdef>
      <memberdef kind="function" id="classtf_1_1Executor_1a7c8592d6c77aaef1a49ce0295fa6e658" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename P</type>
          </param>
          <param>
            <type>typename F</type>
          </param>
          <param>
            <type>typename I</type>
          </param>
          <param>
            <type>std::enable_if_t&lt; <ref refid="namespacetf_1ad3a41adc2499a9519da3e77dc3e9849c" kindref="member">is_task_params_v</ref>&lt; P &gt; &amp;&amp;!std::is_same_v&lt; std::decay_t&lt; I &gt;, <ref refid="classtf_1_1AsyncTask" kindref="compound">AsyncTask</ref> &gt;, void &gt; *</type>
            <defval>nullptr</defval>
          </param>
        </templateparamlist>
        <type>auto</type>
        <definition>auto tf::Executor::_silent_dependent_async</definition>
        <argsstring>(P &amp;&amp;, F &amp;&amp;, I, I, Topology *, Node *)</argsstring>
        <name>_silent_dependent_async</name>
        <param>
          <type>P &amp;&amp;</type>
        </param>
        <param>
          <type>F &amp;&amp;</type>
        </param>
        <param>
          <type>I</type>
        </param>
        <param>
          <type>I</type>
        </param>
        <param>
          <type>Topology *</type>
        </param>
        <param>
          <type>Node *</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="taskflow/core/executor.hpp" line="1153" column="8"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>class to create an executor </para>
    </briefdescription>
    <detaileddescription>
<para>An <ref refid="classtf_1_1Executor" kindref="compound">tf::Executor</ref> manages a set of worker threads to run tasks using an efficient work-stealing scheduling algorithm.</para>
<para><programlisting filename=".cpp"><codeline><highlight class="comment">//<sp/>Declare<sp/>an<sp/>executor<sp/>and<sp/>a<sp/>taskflow</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><ref refid="classtf_1_1Executor" kindref="compound">tf::Executor</ref><sp/>executor;</highlight></codeline>
<codeline><highlight class="normal"><ref refid="classtf_1_1Taskflow" kindref="compound">tf::Taskflow</ref><sp/>taskflow;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Add<sp/>three<sp/>tasks<sp/>into<sp/>the<sp/>taskflow</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><ref refid="classtf_1_1Task" kindref="compound">tf::Task</ref><sp/>A<sp/>=<sp/>taskflow.<ref refid="classtf_1_1FlowBuilder_1a60d7a666cab71ecfa3010b2efb0d6b57" kindref="member">emplace</ref>([]<sp/>()<sp/>{<sp/><ref refid="cpp/io/basic_ostream" kindref="compound" external="/home/thuang295/Code/taskflow/doxygen/cppreference-doxygen-web.tag.xml">std::cout</ref><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;This<sp/>is<sp/>TaskA\n&quot;</highlight><highlight class="normal">;<sp/>});</highlight></codeline>
<codeline><highlight class="normal"><ref refid="classtf_1_1Task" kindref="compound">tf::Task</ref><sp/>B<sp/>=<sp/>taskflow.<ref refid="classtf_1_1FlowBuilder_1a60d7a666cab71ecfa3010b2efb0d6b57" kindref="member">emplace</ref>([]<sp/>()<sp/>{<sp/><ref refid="cpp/io/basic_ostream" kindref="compound" external="/home/thuang295/Code/taskflow/doxygen/cppreference-doxygen-web.tag.xml">std::cout</ref><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;This<sp/>is<sp/>TaskB\n&quot;</highlight><highlight class="normal">;<sp/>});</highlight></codeline>
<codeline><highlight class="normal"><ref refid="classtf_1_1Task" kindref="compound">tf::Task</ref><sp/>C<sp/>=<sp/>taskflow.<ref refid="classtf_1_1FlowBuilder_1a60d7a666cab71ecfa3010b2efb0d6b57" kindref="member">emplace</ref>([]<sp/>()<sp/>{<sp/><ref refid="cpp/io/basic_ostream" kindref="compound" external="/home/thuang295/Code/taskflow/doxygen/cppreference-doxygen-web.tag.xml">std::cout</ref><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;This<sp/>is<sp/>TaskC\n&quot;</highlight><highlight class="normal">;<sp/>});</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Build<sp/>precedence<sp/>between<sp/>tasks</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">A.<ref refid="classtf_1_1Task_1a8c78c453295a553c1c016e4062da8588" kindref="member">precede</ref>(B,<sp/>C);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><ref refid="classtf_1_1Future" kindref="compound">tf::Future&lt;void&gt;</ref><sp/>fu<sp/>=<sp/>executor.<ref refid="classtf_1_1Executor_1a8d08f0cb79e7b3780087975d13368a96" kindref="member">run</ref>(taskflow);</highlight></codeline>
<codeline><highlight class="normal">fu.wait();<sp/><sp/></highlight><highlight class="comment">//<sp/>block<sp/>until<sp/>the<sp/>execution<sp/>completes</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">executor.<ref refid="classtf_1_1Executor_1a8d08f0cb79e7b3780087975d13368a96" kindref="member">run</ref>(taskflow,<sp/>[](){<sp/><ref refid="cpp/io/basic_ostream" kindref="compound" external="/home/thuang295/Code/taskflow/doxygen/cppreference-doxygen-web.tag.xml">std::cout</ref><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;end<sp/>of<sp/>1<sp/>run&quot;</highlight><highlight class="normal">;<sp/>}).wait();</highlight></codeline>
<codeline><highlight class="normal">executor.<ref refid="classtf_1_1Executor_1af15db5f7dde8e7ff1f86ef8fe825e9e2" kindref="member">run_n</ref>(taskflow,<sp/>4);</highlight></codeline>
<codeline><highlight class="normal">executor.<ref refid="classtf_1_1Executor_1ab9aa252f70e9a40020a1e5a89d485b85" kindref="member">wait_for_all</ref>();<sp/><sp/></highlight><highlight class="comment">//<sp/>block<sp/>until<sp/>all<sp/>associated<sp/>executions<sp/>finish</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">executor.<ref refid="classtf_1_1Executor_1af15db5f7dde8e7ff1f86ef8fe825e9e2" kindref="member">run_n</ref>(taskflow,<sp/>4,<sp/>[](){<sp/><ref refid="cpp/io/basic_ostream" kindref="compound" external="/home/thuang295/Code/taskflow/doxygen/cppreference-doxygen-web.tag.xml">std::cout</ref><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;end<sp/>of<sp/>4<sp/>runs&quot;</highlight><highlight class="normal">;<sp/>}).wait();</highlight></codeline>
<codeline><highlight class="normal">executor.<ref refid="classtf_1_1Executor_1ae4f9e214ea5ee873e8d90a70bc1c77e8" kindref="member">run_until</ref>(taskflow,<sp/>[cnt=0]<sp/>()<sp/></highlight><highlight class="keyword">mutable</highlight><highlight class="normal"><sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>++cnt<sp/>==<sp/>10;<sp/>});</highlight></codeline>
</programlisting></para>
<para>Most executor methods are <emphasis>thread-safe</emphasis>. For example, you can submit multiple taskflows to an executor concurrently from different threads, while other threads simultaneously create asynchronous tasks.</para>
<para><programlisting filename=".cpp"><codeline><highlight class="normal"><ref refid="cpp/thread/thread" kindref="compound" external="/home/thuang295/Code/taskflow/doxygen/cppreference-doxygen-web.tag.xml">std::thread</ref><sp/>t1([&amp;](){<sp/>executor.<ref refid="classtf_1_1Executor_1a8d08f0cb79e7b3780087975d13368a96" kindref="member">run</ref>(taskflow);<sp/>};</highlight></codeline>
<codeline><highlight class="normal"><ref refid="cpp/thread/thread" kindref="compound" external="/home/thuang295/Code/taskflow/doxygen/cppreference-doxygen-web.tag.xml">std::thread</ref><sp/>t2([&amp;](){<sp/>executor.<ref refid="classtf_1_1Executor_1af960048056f7c6b5bc71f4f526f05df7" kindref="member">async</ref>([](){<sp/><ref refid="cpp/io/basic_ostream" kindref="compound" external="/home/thuang295/Code/taskflow/doxygen/cppreference-doxygen-web.tag.xml">std::cout</ref><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;async<sp/>task<sp/>from<sp/>t2\n&quot;</highlight><highlight class="normal">;<sp/>});<sp/>});</highlight></codeline>
<codeline><highlight class="normal">executor.<ref refid="classtf_1_1Executor_1af960048056f7c6b5bc71f4f526f05df7" kindref="member">async</ref>([&amp;](){<sp/><ref refid="cpp/io/basic_ostream" kindref="compound" external="/home/thuang295/Code/taskflow/doxygen/cppreference-doxygen-web.tag.xml">std::cout</ref><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;async<sp/>task<sp/>from<sp/>the<sp/>main<sp/>thread\n&quot;</highlight><highlight class="normal">;<sp/>});</highlight></codeline>
</programlisting></para>
<para><simplesect kind="note"><para>To know more about <ref refid="classtf_1_1Executor" kindref="compound">tf::Executor</ref>, please refer to <ref refid="ExecuteTaskflow" kindref="compound">Executor</ref>. </para>
</simplesect>
</para>
    </detaileddescription>
    <location file="taskflow/core/executor.hpp" line="63" column="1" bodyfile="taskflow/core/executor.hpp" bodystart="63" bodyend="1154"/>
    <listofallmembers>
      <member refid="classtf_1_1Executor_1ac568bd686aba3bedabe63b42c43d94a8" prot="private" virt="non-virtual"><scope>tf::Executor</scope><name>_async</name></member>
      <member refid="classtf_1_1Executor_1a193faa77f840c8ab653cf063fba6a6f9" prot="private" virt="non-virtual"><scope>tf::Executor</scope><name>_buffers</name></member>
      <member refid="classtf_1_1Executor_1aec313f2f099ee2fd6cb85a164457f019" prot="private" virt="non-virtual"><scope>tf::Executor</scope><name>_corun_graph</name></member>
      <member refid="classtf_1_1Executor_1a43cdd198427b7be2827450f6ce8343af" prot="private" virt="non-virtual"><scope>tf::Executor</scope><name>_corun_until</name></member>
      <member refid="classtf_1_1Executor_1a8728f22f6d177fad84ce667e02a7a3b9" prot="private" virt="non-virtual"><scope>tf::Executor</scope><name>_decrement_topology</name></member>
      <member refid="classtf_1_1Executor_1a1b8e9646bfacc44442ffb99a9de17703" prot="private" virt="non-virtual"><scope>tf::Executor</scope><name>_dependent_async</name></member>
      <member refid="classtf_1_1Executor_1a0b4f231e11016194980b14e76262c8a7" prot="private" virt="non-virtual"><scope>tf::Executor</scope><name>_exploit_task</name></member>
      <member refid="classtf_1_1Executor_1ac5827e67b2b60c16259b45e14c6e97e0" prot="private" virt="non-virtual"><scope>tf::Executor</scope><name>_explore_task</name></member>
      <member refid="classtf_1_1Executor_1ab85dc42b3e9b18e4b975bd5e9a8c5e72" prot="private" virt="non-virtual"><scope>tf::Executor</scope><name>_increment_topology</name></member>
      <member refid="classtf_1_1Executor_1ad16165142908aca9444ea88e65040219" prot="private" virt="non-virtual"><scope>tf::Executor</scope><name>_invoke</name></member>
      <member refid="classtf_1_1Executor_1a1d1b9bf8ed24dffff65d860ef1627ef3" prot="private" virt="non-virtual"><scope>tf::Executor</scope><name>_invoke_async_task</name></member>
      <member refid="classtf_1_1Executor_1afa6be6aab23ff4b2a293a2245818916d" prot="private" virt="non-virtual"><scope>tf::Executor</scope><name>_invoke_condition_task</name></member>
      <member refid="classtf_1_1Executor_1a776d2c0b21b8811c2f83abf45e3d0d90" prot="private" virt="non-virtual"><scope>tf::Executor</scope><name>_invoke_dependent_async_task</name></member>
      <member refid="classtf_1_1Executor_1a429fed7f063b23a633e1657a43f1fd0e" prot="private" virt="non-virtual"><scope>tf::Executor</scope><name>_invoke_module_task</name></member>
      <member refid="classtf_1_1Executor_1af9e21517ed8c6a1ce2cea4cda61fb111" prot="private" virt="non-virtual"><scope>tf::Executor</scope><name>_invoke_module_task_impl</name></member>
      <member refid="classtf_1_1Executor_1a19b3f10d4eab40143d3f76b946ded252" prot="private" virt="non-virtual"><scope>tf::Executor</scope><name>_invoke_multi_condition_task</name></member>
      <member refid="classtf_1_1Executor_1a928ed677e7694fa3679dc717fe22e763" prot="private" virt="non-virtual"><scope>tf::Executor</scope><name>_invoke_nonpreemptive_runtime_task</name></member>
      <member refid="classtf_1_1Executor_1a324dfe88e4b227fce0fdc76b667c40ce" prot="private" virt="non-virtual"><scope>tf::Executor</scope><name>_invoke_runtime_task</name></member>
      <member refid="classtf_1_1Executor_1a7dbf235bdda813dd63e851cbae573bb4" prot="private" virt="non-virtual"><scope>tf::Executor</scope><name>_invoke_runtime_task_impl</name></member>
      <member refid="classtf_1_1Executor_1aa7ccdd2724a8782e04d8a19567912e67" prot="private" virt="non-virtual"><scope>tf::Executor</scope><name>_invoke_runtime_task_impl</name></member>
      <member refid="classtf_1_1Executor_1ac243d2a08b5a4a75dd440dc063b886ce" prot="private" virt="non-virtual"><scope>tf::Executor</scope><name>_invoke_static_task</name></member>
      <member refid="classtf_1_1Executor_1a726a11d174f98f4200e0022a17ece959" prot="private" virt="non-virtual"><scope>tf::Executor</scope><name>_invoke_subflow_task</name></member>
      <member refid="classtf_1_1Executor_1ab36f7f886f9a6a9ad67ce919ca39d688" prot="private" virt="non-virtual"><scope>tf::Executor</scope><name>_notifier</name></member>
      <member refid="classtf_1_1Executor_1a7bd9227be27ebae3a10d5c317a6ef5de" prot="private" virt="non-virtual"><scope>tf::Executor</scope><name>_num_topologies</name></member>
      <member refid="classtf_1_1Executor_1a9cd8c1a72af4477bc0f9575b68ffb16a" prot="private" virt="non-virtual"><scope>tf::Executor</scope><name>_observer_epilogue</name></member>
      <member refid="classtf_1_1Executor_1ae023614977a19def9e04cf7212eab65b" prot="private" virt="non-virtual"><scope>tf::Executor</scope><name>_observer_prologue</name></member>
      <member refid="classtf_1_1Executor_1ad7f083460df992b1186f83ac99481a57" prot="private" virt="non-virtual"><scope>tf::Executor</scope><name>_observers</name></member>
      <member refid="classtf_1_1Executor_1a62a4f5f02d7318fdc6cecaacb27d2673" prot="private" virt="non-virtual"><scope>tf::Executor</scope><name>_process_dependent_async</name></member>
      <member refid="classtf_1_1Executor_1ad3c24a3fa701517bfdf119c549e2729a" prot="private" virt="non-virtual"><scope>tf::Executor</scope><name>_process_exception</name></member>
      <member refid="classtf_1_1Executor_1ab8d98f12a62d10ad6cf1a4011a4d0034" prot="private" virt="non-virtual"><scope>tf::Executor</scope><name>_schedule</name></member>
      <member refid="classtf_1_1Executor_1a685c08b62a494359e34c6de2a700fdab" prot="private" virt="non-virtual"><scope>tf::Executor</scope><name>_schedule</name></member>
      <member refid="classtf_1_1Executor_1add98fb65f206923eb43a8768e0c717c1" prot="private" virt="non-virtual"><scope>tf::Executor</scope><name>_schedule</name></member>
      <member refid="classtf_1_1Executor_1a604b3442bfedada0f5713c6b174a1c90" prot="private" virt="non-virtual"><scope>tf::Executor</scope><name>_schedule</name></member>
      <member refid="classtf_1_1Executor_1af5acda8c6e9a1564c9d665336ea091d0" prot="private" virt="non-virtual"><scope>tf::Executor</scope><name>_schedule_async_task</name></member>
      <member refid="classtf_1_1Executor_1ae3d3436d6e39c5e84d32eb0b7dbeb9ca" prot="private" virt="non-virtual"><scope>tf::Executor</scope><name>_schedule_graph_with_parent</name></member>
      <member refid="classtf_1_1Executor_1aeaa72f55f54c0f13202c3b5c0900ba6e" prot="private" virt="non-virtual"><scope>tf::Executor</scope><name>_set_up_graph</name></member>
      <member refid="classtf_1_1Executor_1a723daf897c5d3d3517583cb4c62654ee" prot="private" virt="non-virtual"><scope>tf::Executor</scope><name>_set_up_topology</name></member>
      <member refid="classtf_1_1Executor_1a918b9de1ca1e20e35bf0d3b610dfa803" prot="private" virt="non-virtual"><scope>tf::Executor</scope><name>_shutdown</name></member>
      <member refid="classtf_1_1Executor_1aa3b32388be14b03249de29bae34b7b52" prot="private" virt="non-virtual"><scope>tf::Executor</scope><name>_silent_async</name></member>
      <member refid="classtf_1_1Executor_1a7c8592d6c77aaef1a49ce0295fa6e658" prot="private" virt="non-virtual"><scope>tf::Executor</scope><name>_silent_dependent_async</name></member>
      <member refid="classtf_1_1Executor_1a8aee6c0ec55b4bfb3909601203e98514" prot="private" virt="non-virtual"><scope>tf::Executor</scope><name>_spawn</name></member>
      <member refid="classtf_1_1Executor_1a7aeb0de870c6e28599e9f80486dae736" prot="private" virt="non-virtual"><scope>tf::Executor</scope><name>_t2w</name></member>
      <member refid="classtf_1_1Executor_1a63090414fbad15f5934838d21aa0a28f" prot="private" virt="non-virtual"><scope>tf::Executor</scope><name>_taskflows</name></member>
      <member refid="classtf_1_1Executor_1aef4cf993dbd8efa0372cdea6b0f725d7" prot="private" virt="non-virtual"><scope>tf::Executor</scope><name>_taskflows_mutex</name></member>
      <member refid="classtf_1_1Executor_1a79f99f43c3c92b435b07aa8dad58a705" prot="private" virt="non-virtual"><scope>tf::Executor</scope><name>_tear_down_async</name></member>
      <member refid="classtf_1_1Executor_1ac45426ad824479abf50a235ce694cbed" prot="private" virt="non-virtual"><scope>tf::Executor</scope><name>_tear_down_dependent_async</name></member>
      <member refid="classtf_1_1Executor_1a1b5d5e8b7093379e3ff9108c21beb462" prot="private" virt="non-virtual"><scope>tf::Executor</scope><name>_tear_down_invoke</name></member>
      <member refid="classtf_1_1Executor_1a1acd8ab422ebef8ea91ea0f51b80352f" prot="private" virt="non-virtual"><scope>tf::Executor</scope><name>_tear_down_nonasync</name></member>
      <member refid="classtf_1_1Executor_1a76be884d38d1bb8f9b8bba488c901b4b" prot="private" virt="non-virtual"><scope>tf::Executor</scope><name>_tear_down_topology</name></member>
      <member refid="classtf_1_1Executor_1a4b2c977a4a054b54c5a563c804accdf0" prot="private" virt="non-virtual"><scope>tf::Executor</scope><name>_update_cache</name></member>
      <member refid="classtf_1_1Executor_1a57f5105dc812d83f259ec8cab7c96228" prot="private" virt="non-virtual"><scope>tf::Executor</scope><name>_wait_for_task</name></member>
      <member refid="classtf_1_1Executor_1a9b123d06eb807bf275ba761938624afc" prot="private" virt="non-virtual"><scope>tf::Executor</scope><name>_worker_interface</name></member>
      <member refid="classtf_1_1Executor_1ad93162f032d463cc845fbca4fc0d960e" prot="private" virt="non-virtual"><scope>tf::Executor</scope><name>_workers</name></member>
      <member refid="classtf_1_1Executor_1ab016b9124e80f55ad92e01579c060f08" prot="private" virt="non-virtual"><scope>tf::Executor</scope><name>Algorithm</name></member>
      <member refid="classtf_1_1Executor_1af960048056f7c6b5bc71f4f526f05df7" prot="public" virt="non-virtual"><scope>tf::Executor</scope><name>async</name></member>
      <member refid="classtf_1_1Executor_1a28bdb43837bd6b548e092154e4df5dd9" prot="public" virt="non-virtual"><scope>tf::Executor</scope><name>async</name></member>
      <member refid="classtf_1_1Executor_1a8fcd9e0557922bb8194999f0cd433ea8" prot="public" virt="non-virtual"><scope>tf::Executor</scope><name>corun</name></member>
      <member refid="classtf_1_1Executor_1a0fc6eb19f168dc4a9cd0a7c6187c1d2d" prot="public" virt="non-virtual"><scope>tf::Executor</scope><name>corun_until</name></member>
      <member refid="classtf_1_1Executor_1aee02b63d3a91ad5ca5a1c0e71f3e128f" prot="public" virt="non-virtual"><scope>tf::Executor</scope><name>dependent_async</name></member>
      <member refid="classtf_1_1Executor_1a4428cc5d1102ecb0eb51e0b977e08857" prot="public" virt="non-virtual"><scope>tf::Executor</scope><name>dependent_async</name></member>
      <member refid="classtf_1_1Executor_1a01e51e564f5def845506bcf6b4bb1664" prot="public" virt="non-virtual"><scope>tf::Executor</scope><name>dependent_async</name></member>
      <member refid="classtf_1_1Executor_1a962d7fb7213a804ee4a2e7b79455efdc" prot="public" virt="non-virtual"><scope>tf::Executor</scope><name>dependent_async</name></member>
      <member refid="classtf_1_1Executor_1a23b4c858279616d79612dccd9a715365" prot="public" virt="non-virtual"><scope>tf::Executor</scope><name>Executor</name></member>
      <member refid="classtf_1_1Executor_1a61184f9bd9c801d0a5eccecfdbddc641" prot="private" virt="non-virtual"><scope>tf::Executor</scope><name>FlowBuilder</name></member>
      <member refid="classtf_1_1Executor_1ab5a793a0f2ce41cd49ca45e9f0a6962c" prot="public" virt="non-virtual"><scope>tf::Executor</scope><name>make_observer</name></member>
      <member refid="classtf_1_1Executor_1a5336d73e2623282058a4f84a0423fac3" prot="private" virt="non-virtual"><scope>tf::Executor</scope><name>NonpreemptiveRuntime</name></member>
      <member refid="classtf_1_1Executor_1affec621aae59d73fc188ef454008fda2" prot="public" virt="non-virtual"><scope>tf::Executor</scope><name>num_observers</name></member>
      <member refid="classtf_1_1Executor_1a68875600becd2b6593d0e7518896ab2b" prot="public" virt="non-virtual"><scope>tf::Executor</scope><name>num_queues</name></member>
      <member refid="classtf_1_1Executor_1a5fb438dc0f7b9e1ae2fe3f240c82f174" prot="public" virt="non-virtual"><scope>tf::Executor</scope><name>num_taskflows</name></member>
      <member refid="classtf_1_1Executor_1a6d6c28ed58211e4c27a99571e5bf0b6c" prot="public" virt="non-virtual"><scope>tf::Executor</scope><name>num_topologies</name></member>
      <member refid="classtf_1_1Executor_1a5205c78ec06ef01de0c7d6a71adad07a" prot="public" virt="non-virtual"><scope>tf::Executor</scope><name>num_waiters</name></member>
      <member refid="classtf_1_1Executor_1a9d2d464ab2a84ecb3b3ea7747e8e276b" prot="public" virt="non-virtual"><scope>tf::Executor</scope><name>num_workers</name></member>
      <member refid="classtf_1_1Executor_1a31081f492c376f7b798de0e430534531" prot="public" virt="non-virtual"><scope>tf::Executor</scope><name>remove_observer</name></member>
      <member refid="classtf_1_1Executor_1a8d08f0cb79e7b3780087975d13368a96" prot="public" virt="non-virtual"><scope>tf::Executor</scope><name>run</name></member>
      <member refid="classtf_1_1Executor_1a4b97752c00b788918cb8396fbb1b3ad0" prot="public" virt="non-virtual"><scope>tf::Executor</scope><name>run</name></member>
      <member refid="classtf_1_1Executor_1a5a480ed24a6fd1e4152db69c0c5e2f89" prot="public" virt="non-virtual"><scope>tf::Executor</scope><name>run</name></member>
      <member refid="classtf_1_1Executor_1a2d0dc32d81100202168e42ac1d3dd8f9" prot="public" virt="non-virtual"><scope>tf::Executor</scope><name>run</name></member>
      <member refid="classtf_1_1Executor_1af15db5f7dde8e7ff1f86ef8fe825e9e2" prot="public" virt="non-virtual"><scope>tf::Executor</scope><name>run_n</name></member>
      <member refid="classtf_1_1Executor_1a04aa012598622e807dba3272aa464d7e" prot="public" virt="non-virtual"><scope>tf::Executor</scope><name>run_n</name></member>
      <member refid="classtf_1_1Executor_1a37af2ca2a97f0188fb2c4868d6f322ba" prot="public" virt="non-virtual"><scope>tf::Executor</scope><name>run_n</name></member>
      <member refid="classtf_1_1Executor_1ae5c5c6a1c1f6d4740414c86daa6a3901" prot="public" virt="non-virtual"><scope>tf::Executor</scope><name>run_n</name></member>
      <member refid="classtf_1_1Executor_1ae4f9e214ea5ee873e8d90a70bc1c77e8" prot="public" virt="non-virtual"><scope>tf::Executor</scope><name>run_until</name></member>
      <member refid="classtf_1_1Executor_1a724d188df2952f64c1f2c60555a0a611" prot="public" virt="non-virtual"><scope>tf::Executor</scope><name>run_until</name></member>
      <member refid="classtf_1_1Executor_1a5ed30b8db88cdeb78fe3e8e2de4a84dd" prot="public" virt="non-virtual"><scope>tf::Executor</scope><name>run_until</name></member>
      <member refid="classtf_1_1Executor_1ad7aa69f06309b9226a4046f8c400144e" prot="public" virt="non-virtual"><scope>tf::Executor</scope><name>run_until</name></member>
      <member refid="classtf_1_1Executor_1af3d14e26ba8af9e6cc5a32aad8446de7" prot="private" virt="non-virtual"><scope>tf::Executor</scope><name>Runtime</name></member>
      <member refid="classtf_1_1Executor_1a0461cb2c459c9f9473c72af06af9c701" prot="public" virt="non-virtual"><scope>tf::Executor</scope><name>silent_async</name></member>
      <member refid="classtf_1_1Executor_1a878ec1bc337c7efe22619b21ba3ecdf3" prot="public" virt="non-virtual"><scope>tf::Executor</scope><name>silent_async</name></member>
      <member refid="classtf_1_1Executor_1a0e2d792f28136b8227b413d0c27d5c7f" prot="public" virt="non-virtual"><scope>tf::Executor</scope><name>silent_dependent_async</name></member>
      <member refid="classtf_1_1Executor_1abbf277ddbe4974e928361f232149341e" prot="public" virt="non-virtual"><scope>tf::Executor</scope><name>silent_dependent_async</name></member>
      <member refid="classtf_1_1Executor_1aa9b08e47e68ae1e568f18aa7104cb9b1" prot="public" virt="non-virtual"><scope>tf::Executor</scope><name>silent_dependent_async</name></member>
      <member refid="classtf_1_1Executor_1afdfb0ef6f995288299f7fe7e53c0cf3b" prot="public" virt="non-virtual"><scope>tf::Executor</scope><name>silent_dependent_async</name></member>
      <member refid="classtf_1_1Executor_1aa48945297ede77a161defc88033ce8a6" prot="private" virt="non-virtual"><scope>tf::Executor</scope><name>Subflow</name></member>
      <member refid="classtf_1_1Executor_1a4f388dd1dc6e949d04a6beec1d146f89" prot="public" virt="non-virtual"><scope>tf::Executor</scope><name>this_worker</name></member>
      <member refid="classtf_1_1Executor_1a6487d589cb1f6b078b69fd3bb1082345" prot="public" virt="non-virtual"><scope>tf::Executor</scope><name>this_worker_id</name></member>
      <member refid="classtf_1_1Executor_1ab9aa252f70e9a40020a1e5a89d485b85" prot="public" virt="non-virtual"><scope>tf::Executor</scope><name>wait_for_all</name></member>
      <member refid="classtf_1_1Executor_1a5a511b0cc23b264826373d3dabcef670" prot="public" virt="non-virtual"><scope>tf::Executor</scope><name>~Executor</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
